!function(){"use strict";window.addEventListener("load",(function(){let e=document.createElement("div");e.className="lds-grid";for(let t=0;t<9;t++)e.appendChild(document.createElement("div"));e.style.left=window.innerWidth/2-32+"px";let t=document.querySelector("#loading-screen");t.style.width=window.innerWidth+"px",t.style.height=window.innerHeight+"px",t.appendChild(e)}),!1);var e,t=(e=new THREE.Matrix4,function(t,n){n.matrix.copy(t.matrixWorld),n.applyMatrix(e.getInverse(n.parent.matrixWorld))});AFRAME.registerSystem("grabbable",{schema:{},init:function(){CS1.grabbables={},CS1.__updateGrabbables=e=>{0!==Object.keys(CS1.grabbables).length&&CS1.grabbables[e[0].name]&&CS1.game.hasBegun&&e.forEach((e,t)=>{let n=CS1.grabbables[e.name];CS1.debug&&(console.log("Individual body data from server:"),console.log(e)),e.position&&n.object3D.position.copy(e.position),e.scale&&n.object3D.scale.copy(e.scale),e.rotation&&n.object3D.quaternion.copy(e.rotation)})},CS1.socket.on("add-grabbable-primitive",e=>{if(e.origin==CS1.socket.id)return;const t=document.createElement(e.type);if(t.setAttribute("grabbable","remote:true"),t.object3D.position.set(e.data.position.x,e.data.position.y,e.data.position.z),t.object3D.scale.set(e.data.scale.x,e.data.scale.y,e.data.scale.z),t.object3D.setRotationFromQuaternion(new THREE.Quaternion(e.data.rotation.x,e.data.rotation.y,e.data.rotation.z,e.data.rotation.w)),t.soundState=e.data.soundState,console.log("adding remote late grabbable"),e.custom)for(let[n,o]of Object.entries(e.custom))o&&t.setAttribute(n,o),"collectible"==n&&console.log("detected collectible on remote late grabbable"),"launchable"==n&&(t.setAttribute("launchable",""),console.log("detected launchable on remote late grabbable"));CS1.scene.appendChild(t)})}}),AFRAME.registerComponent("grabbable",{schema:{origin:{type:"selector"},remote:{default:!1}},init:function(){var e=this;if(e.cursor=!1,e.isDragging=!1,e.originEl=this.data.origin||this.el,e.proxyObject=null,e.el.classList.add("interactive"),e.el.components.log&&(e.el.setAttribute("log",`channel:${String(e.name)}`),CS1.socket._callbacks["$vr-log"]||CS1.socket.on("vr-log",e=>{CS1.log(e.msg,String(e.channel))})),this.name=Object.keys(CS1.grabbables).length,CS1.grabbables[this.name]=e.el,CS1&&CS1.game&&CS1.game.hasBegun&&!this.data.remote){console.log("Adding a local late grabbable.");const t={};t.color=e.el.getAttribute("color");const o=e.el.getAttribute("src");o&&(t.src=o);const i=e.el.components.collectible;i&&(t.collectible=i.data,console.log("detected collectible on local late grabbable")),e.el.components.launchable&&(t.launchable=!0,console.log("detected launchable on local late grabbable")),n();let a={name:e.name,position:e.el.object3D.position,scale:e.el.object3D.scale,rotation:{x:e.el.object3D.quaternion.x,y:e.el.object3D.quaternion.y,z:e.el.object3D.quaternion.z,w:e.el.object3D.quaternion.w},soundState:e.el.soundState};CS1.socket.emit("add-grabbable-primitive",{type:e.el.nodeName,data:a,custom:t,origin:CS1.socket.id})}function n(){"Mobile"==CS1.device?(e.el.addEventListener("click",(function(e){o(e),setTimeout((function(e){document.querySelector("#cam-cursor").setAttribute("material","color: yellow"),i(e),setTimeout((function(e){document.querySelector("#cam-cursor").setAttribute("material","color: crimson")}),500)}),5e3)})),e.el.addEventListener("mouseenter",e=>{document.querySelector("#cam-cursor").setAttribute("material",{color:"green"})}),e.el.addEventListener("mouseleave",e=>{document.querySelector("#cam-cursor").setAttribute("material",{color:"crimson"})})):"Standard"==CS1.device&&(e.el.addEventListener("mouseenter",e=>{document.querySelector("#cam-cursor").setAttribute("material",{color:"green"})}),e.el.addEventListener("mouseleave",e=>{document.querySelector("#cam-cursor").setAttribute("material",{color:"crimson"})})),document.removeEventListener("gameStart",n)}function o(n){var o;n.cancelBubble=!0,e.isDragging||(e.isDragging=!0,e.cursor=n.detail.cursorEl,e.cursor==e.el.sceneEl&&(e.cursor=document.querySelector("[camera]")),e.el.setAttribute("visible",!1),setTimeout((function(){e.el.setAttribute("visible",!0)}),20),o=e.cursor.object3D,e.proxyObject=new THREE.Object3D,e.originEl.visible=!1,setTimeout((function(){e.originEl.visible=!0}),1e3),o.add(e.proxyObject),t(e.originEl.object3D,e.proxyObject),e.originEl.emit("grabStart",n),e.originEl.addState("moving"))}function i(t){e.isDragging&&(e.isDragging=!1,e.proxyObject&&(e.proxyObject.parent.remove(e.proxyObject),e.proxyObject=null),e.originEl.setAttribute("position",e.originEl.getAttribute("position")),e.originEl.setAttribute("rotation",e.originEl.getAttribute("rotation")),e.originEl.emit("grabEnd",t),e.originEl.removeState("moving"))}e.el.addEventListener("mousedown",o),e.el.addEventListener("mouseup",i),document.addEventListener("gameStart",n),AFRAME.utils.device.checkHeadsetConnected(),e.el.addEventListener("mouseup",i)},tick:function(){this.proxyObject&&(t(this.proxyObject,this.originEl.object3D),this.originEl.setAttribute("position",this.originEl.getAttribute("position")),this.originEl.setAttribute("rotation",this.originEl.getAttribute("rotation")))}}),AFRAME.registerComponent("nav-pointer",{init:function(){const e=this.el;e.addEventListener("click",t=>{const n=e.sceneEl.querySelector("[nav-agent]");n&&n.setAttribute("nav-agent",{active:!0,destination:t.detail.intersection.point})}),e.addEventListener("mouseenter",t=>{e.setAttribute("material",{color:"green"})}),e.addEventListener("mouseleave",t=>{e.setAttribute("material",{color:"crimson"})}),e.addEventListener("mousedown",e=>{}),e.sceneEl.addEventListener("object3dset",e=>{this.el.components.raycaster.refreshObjects()})}}),AFRAME.registerComponent("weather-viz",{schema:{side:{type:"string",default:"double"},url:{type:"string",default:"https://api.openweathermap.org/data/2.5/forecast/?appid=56df5e300fabead0a56fc2d706e6aa7d&id=4959473"}},dependencies:["geometry","material"],init:function(){this.el.setAttribute("width",6),this.el.setAttribute("height",4),this.canvas=document.createElement("canvas"),this.canvas.style.position="absolute",this.canvas.style.left=-2e3,this.canvas.id=CS1.utils.uid(),this.canvas.setAttribute("crossOrigin","anonymous"),document.querySelector("a-scene").appendChild(this.canvas),this.el.setAttribute("material",`shader:flat;src:#${this.canvas.id};side:${this.data.side}`),this.cursor=document.querySelector("#cam-cursor");var e=this.ctx=this.canvas.getContext("2d");e.fillStyle="rgb(0, 0, 0)",e.fillRect(0,0,this.canvas.width,this.canvas.height),this.dataProcessed=!1,fetch(this.data.url).then(e=>e.json()).then(e=>{this.processData(e)}).catch(e=>{console.log(e)})},processData:function(e){this.data=[],e.list.forEach(e=>{this.data.push({dt:e.dt_txt,temp_max:this.k2f(e.main.temp_max)})}),this.dataProcessed=!0},k2f:function(e){return Math.round(9*(e-273.15)/5+32)},tick:function(e,t){this.dataProcessed&&(this.visualizeData(e),this.updateCanvas())},visualizeData:function(e){let t=this.canvas,n=t.width/this.data.length,o=this.ctx;"green"==this.cursor.getAttribute("material").color&&(e=1e3),this.data.forEach((i,a)=>{let r=e*(i.temp_max/900);o.fillStyle="hsl("+r+", 50%, 30%)",o.fillRect(a*n,0,n,t.height)})},drawRectangles:function(e){var t,n,o=this.canvas,i=this.ctx,a=e/10;i.fillStyle="hsl("+a+", 50%, 80%)",i.fillRect(0,0,o.width,o.height),a=e/15,i.fillStyle="hsl("+a+", 50%, 60%)",t=o.width/10,n=o.height/10,i.fillRect(t,n,o.width-2*t,o.height-2*n),a=e/20,i.fillStyle="hsl("+a+", 50%, 40%)",t=o.width/5,n=o.height/5,i.fillRect(t,n,o.width-2*t,o.height-2*n)},updateCanvas:function(){var e;(e=this.el.getObject3D("mesh").material).map&&(e.map.needsUpdate=!0)}});var n={id:139,name:"Polkadot Shader",fragment:"// Gives us dFdx\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\n\nuniform vec3 cameraPosition;\nuniform vec3 color1;\nuniform vec3 color2;\nuniform float frequency;\nuniform float radius;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\n// Anti-alias step function\nfloat aastep(float threshold, float value) {\n    float afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));\n    return smoothstep(threshold - afwidth, threshold + afwidth, value);\n}\n \nvoid main() {\n    // Rotate the UV coord by 45 degrees. See \n    // https://en.wikipedia.org/wiki/Rotation_matrix#Common_rotations\n    vec2 st2 = mat2( 0.5, -0.5, 0.5, 0.5 ) * vUv;\n    vec2 nearest = 2.0 * fract( frequency * st2 ) - 1.0;\n    float dist = length( nearest );\n    \n    vec3 fragcolor = mix( color1, color2, aastep( radius, dist ) );\n    gl_FragColor = vec4( fragcolor, 1.0 );\n}",vertex:"/**\n* Example Vertex Shader\n* Sets the position of the vertex by setting gl_Position\n*/\n\n// Set the precision for data types used in this shader\nprecision highp float;\nprecision highp int;\n\n// Default THREE.js uniforms available to both fragment and vertex shader\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\n\n// Default uniforms provided by ShaderFrog.\nuniform vec3 cameraPosition;\nuniform float time;\n\n// Default attributes provided by THREE.js. Attributes are only available in the\n// vertex shader. You can pass them to the fragment shader using varyings\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n\n// Examples of variables passed from vertex to fragment shader\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\n\nvoid main() {\n\n    // To pass variables to the fragment shader, you assign them here in the\n    // main function. Traditionally you name the varying with vAttributeName\n    vNormal = normal;\n    vUv = uv;\n    vUv2 = uv2;\n    vPosition = position;\n\n    // This sets the position of the vertex in 3d space. The correct math is\n    // provided below to take into account camera and object data.\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}",uniforms:{cameraPosition:{name:"cameraPosition",type:"v3",glslType:"vec3",description:""},time:{name:"time",type:"f",glslType:"float",description:""},color1:{name:null,type:"c",glslType:"vec3",value:{r:1,g:.5411764705882353,b:.7294117647058823},description:""},color2:{name:null,type:"c",glslType:"vec3",value:{r:0,g:0,b:0},description:""},frequency:{name:null,type:"f",glslType:"float",value:"10",description:""},radius:{name:null,type:"f",glslType:"float",value:"0.5",description:""}},url:"http://shaderfrog.com/app/view/139",user:{username:"andrewray",url:"http://shaderfrog.com/app/profile/andrewray"}},o={id:1068,name:"Sun Shader",fragment:"#define OCTAVES 2\n\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform float time;\nuniform float brightness;\nuniform float sunSpots;\nuniform vec3 color;\nuniform vec2 speed;\nuniform vec2 resolution;\nvarying vec2 vUv;\nfloat rand(vec2 n) \n{\n    return fract(sin(dot(n, vec2(13, 5))) * 43758.5453);\n}\nfloat noise(vec2 n) \n{\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\nfloat fbm(vec2 n) \n{\n    float total = 0.0;\n    float amplitude = 2.0;\n    for (int i = 0;\n i < OCTAVES; i++) \n    {\n        total += noise(n) * amplitude;\n        n += n;\n        amplitude *= 0.3;\n    }\n    return total;\n}\nvec3 tex(vec2 pos) \n{\n    vec3 c1 = (1.0 - sunSpots) * vec3(3.1, 0.0, 0.0);\n    vec3 c2 = vec3(c1);\n    vec3 c3 = vec3(c1);\n    vec3 c4 = vec3(3.0, 0.9, 0.0) * color;\n    vec3 c5 = vec3(c3);\n    vec3 c6 = vec3(c1);\n    vec2 p = pos;\n    float q = fbm(p + time * speed);\n    vec2 r = vec2(fbm(p + q + (time * speed.x) - p.x - p.y), fbm(p + p + (time * speed.y)));\n    vec3 c = color * (mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y));\n    return c;\n}\nvec4 Surface_of_The_Sun1478777938883_101_main() \n{\n    vec4 Surface_of_The_Sun1478777938883_101_gl_FragColor = vec4(0.0);\n    vec2 p = (vUv - 0.5) * resolution;\n    vec3 col = tex(p);\n    Surface_of_The_Sun1478777938883_101_gl_FragColor = vec4(col * brightness, 1.0);\n    return Surface_of_The_Sun1478777938883_101_gl_FragColor *= 1.0;\n}\nvoid main() \n{\n    gl_FragColor = (Surface_of_The_Sun1478777938883_101_main());}\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nvec4 Surface_of_The_Sun1478777938883_101_main() \n{\n    vec4 Surface_of_The_Sun1478777938883_101_gl_Position = vec4(0.0);\n    vNormal = normal;\n    vUv = uv;\n    vUv2 = uv2;\n    vPosition = position;\n    Surface_of_The_Sun1478777938883_101_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    return Surface_of_The_Sun1478777938883_101_gl_Position *= 1.0;\n}\nvoid main() \n{\n    gl_Position = Surface_of_The_Sun1478777938883_101_main();}\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},resolution:{value:{x:"100",y:"100"},type:"v2",glslType:"vec2"},brightness:{value:"0.52098325",type:"f",glslType:"float"},speed:{value:{x:.9230769230769231,y:.9230769230769231},type:"v2",glslType:"vec2"},color:{value:{r:"1",g:"1",b:"1"},type:"c",glslType:"vec3"},sunSpots:{value:"1",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/1068",user:{username:"entropy",url:"http://shaderfrog.com/app/profile/andrewray"}},i={id:2901,name:"Jelly Shader",fragment:"#define TAU 6.28318530718\n#define MAX_ITER 5\n#define tau 6.2831853\n\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform vec2 Tiling_Caustic1477531952046_152_resolution;\nuniform vec3 backgroundColor;\nuniform vec3 Tiling_Caustic1477531952046_152_color;\nuniform float Tiling_Caustic1477531952046_152_speed;\nuniform float Tiling_Caustic1477531952046_152_brightness;\nuniform float time;\nuniform float contrast;\nuniform float distortion;\nuniform float Noise_Ripples1477531959288_166_speed;\nuniform vec3 Noise_Ripples1477531959288_166_color;\nuniform float Noise_Ripples1477531959288_166_brightness;\nuniform sampler2D noiseImage;\nuniform vec2 Noise_Ripples1477531959288_166_resolution;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform float highlightIntensity;\nuniform vec3 highlightColor;\nuniform vec3 Wiggly_Improved1477532051339_181_color;\nuniform vec3 Transparent_Glow1477532059126_201_color;\nuniform float Transparent_Glow1477532059126_201_start;\nuniform float Transparent_Glow1477532059126_201_end;\nuniform float Transparent_Glow1477532059126_201_alpha;\nuniform vec3 Glow_Effect1477532183055_216_color;\nuniform float Glow_Effect1477532183055_216_start;\nuniform float Glow_Effect1477532183055_216_end;\nuniform float Glow_Effect1477532183055_216_alpha;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nmat2 makem2(in float theta) \n    {\n        float c = cos(theta);\n        float s = sin(theta);\n        return mat2(c, -s, s, c);\n    }\nfloat noise(in vec2 x) \n    {\n        return texture2D(noiseImage, x * .01).x;\n    }\nfloat fbm(in vec2 p) \n    {\n        float z = 2.;\n        float rz = 0.;\n        vec2 bp = p;\n        for (float i = 1.;\n i < 6.0; i++) \n        {\n            rz += abs((noise(p) - 0.5) * 2.0) / z;\n            z = z * 2.;\n            p = p * 2.;\n        }\n        return rz;\n    }\nfloat dualfbm(in vec2 p) \n    {\n        vec2 p2 = p * distortion;\n        vec2 basis = vec2(fbm(p2 - time * Noise_Ripples1477531959288_166_speed * 1.6), fbm(p2 + time * Noise_Ripples1477531959288_166_speed * 1.7));\n        basis = (basis - .5) * .2;\n        p += basis;\n        return fbm(p * makem2(time * Noise_Ripples1477531959288_166_speed * 0.2));\n    }\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_FragColor = vec4(0.0);\n        vec2 uv = Tiling_Caustic1477531952046_152_vUv * Tiling_Caustic1477531952046_152_resolution;\n        vec2 p = mod(uv * TAU, TAU) - 250.0;\n        vec2 i = vec2(p);\n        float c = 1.0;\n        float inten = 0.005;\n        for (int n = 0;\n n < MAX_ITER; n++) \n        {\n            float t = time * Tiling_Caustic1477531952046_152_speed * (1.0 - (3.5 / float(n + 1)));\n            i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n            c += 1.0 / length(vec2(p.x / (sin(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n        }\n        c /= float(MAX_ITER);\n        c = 1.17 - pow(c, Tiling_Caustic1477531952046_152_brightness);\n        vec3 rgb = vec3(pow(abs(c), 8.0));\n        Tiling_Caustic1477531952046_152_gl_FragColor = vec4(rgb * Tiling_Caustic1477531952046_152_color + backgroundColor, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_FragColor *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_FragColor = vec4(0.0);\n        vec2 p = (Noise_Ripples1477531959288_166_vUv.xy - 0.5) * Noise_Ripples1477531959288_166_resolution;\n        float rz = dualfbm(p);\n        vec3 col = (Noise_Ripples1477531959288_166_color / rz) * Noise_Ripples1477531959288_166_brightness;\n        col = ((col - 0.5) * max(contrast, 0.0)) + 0.5;\n        Noise_Ripples1477531959288_166_gl_FragColor = vec4(col, 1.0);\n        return Noise_Ripples1477531959288_166_gl_FragColor *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_FragColor = vec4(0.0);\n        Wiggly_Improved1477532051339_181_gl_FragColor = vec4(clamp(highlightColor * highlightIntensity * light, 0.0, 1.0), 1.0);\n        return Wiggly_Improved1477532051339_181_gl_FragColor *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Transparent_Glow1477532059126_201_fNormal);\n        vec3 eye = normalize(-Transparent_Glow1477532059126_201_fPosition.xyz);\n        float rim = smoothstep(Transparent_Glow1477532059126_201_start, Transparent_Glow1477532059126_201_end, 1.0 - dot(normal, eye));\n        float value = clamp(rim * Transparent_Glow1477532059126_201_alpha, 0.0, 1.0);\n        Transparent_Glow1477532059126_201_gl_FragColor = vec4(Transparent_Glow1477532059126_201_color * value, value);\n        return Transparent_Glow1477532059126_201_gl_FragColor *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Glow_Effect1477532183055_216_fNormal);\n        vec3 eye = normalize(-Glow_Effect1477532183055_216_fPosition.xyz);\n        float rim = smoothstep(Glow_Effect1477532183055_216_start, Glow_Effect1477532183055_216_end, 1.0 - dot(normal, eye));\n        Glow_Effect1477532183055_216_gl_FragColor = vec4(clamp(rim, 0.0, 1.0) * Glow_Effect1477532183055_216_alpha * Glow_Effect1477532183055_216_color, 1.0);\n        return Glow_Effect1477532183055_216_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = (Tiling_Caustic1477531952046_152_main() + Noise_Ripples1477531959288_166_main() + Wiggly_Improved1477532051339_181_main() + Transparent_Glow1477532059126_201_main() + Glow_Effect1477532183055_216_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform float Wiggly_Improved1477532051339_181_speed;\nuniform float frequency;\nuniform float amplitude;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 Tiling_Caustic1477531952046_152_vPosition;\nvarying vec3 Tiling_Caustic1477531952046_152_vNormal;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv2;\nvarying vec3 Noise_Ripples1477531959288_166_vPosition;\nvarying vec3 Noise_Ripples1477531959288_166_vNormal;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv2;\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Wiggly_Improved1477532051339_181_vPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_Position = vec4(0.0);\n        Tiling_Caustic1477531952046_152_vNormal = normal;\n        Tiling_Caustic1477531952046_152_vUv = uv;\n        Tiling_Caustic1477531952046_152_vUv2 = uv2;\n        Tiling_Caustic1477531952046_152_vPosition = position;\n        Tiling_Caustic1477531952046_152_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_Position *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_Position = vec4(0.0);\n        Noise_Ripples1477531959288_166_vNormal = normal;\n        Noise_Ripples1477531959288_166_vUv = uv;\n        Noise_Ripples1477531959288_166_vUv2 = uv2;\n        Noise_Ripples1477531959288_166_vPosition = position;\n        Noise_Ripples1477531959288_166_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Noise_Ripples1477531959288_166_gl_Position *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_Position = vec4(0.0);\n        vec3 offset = normalize(vec3(0.0) - position) * (amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + position.y * frequency));\n        vec3 newPosition = position + vec3(offset.x, 0.0, offset.z);\n        light = amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + 1.0 + position.y * frequency);\n        Wiggly_Improved1477532051339_181_vPosition = newPosition;\n        Wiggly_Improved1477532051339_181_gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n        return Wiggly_Improved1477532051339_181_gl_Position *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_Position = vec4(0.0);\n        Transparent_Glow1477532059126_201_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Transparent_Glow1477532059126_201_fPosition = pos.xyz;\n        Transparent_Glow1477532059126_201_gl_Position = projectionMatrix * pos;\n        return Transparent_Glow1477532059126_201_gl_Position *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_Position = vec4(0.0);\n        Glow_Effect1477532183055_216_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Glow_Effect1477532183055_216_fPosition = pos.xyz;\n        Glow_Effect1477532183055_216_gl_Position = projectionMatrix * pos;\n        return Glow_Effect1477532183055_216_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Tiling_Caustic1477531952046_152_main() + Noise_Ripples1477531959288_166_main() + Wiggly_Improved1477532051339_181_main() + Transparent_Glow1477532059126_201_main() + Glow_Effect1477532183055_216_main();    }\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},backgroundColor:{value:{r:"0",g:"0",b:"0"},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_resolution:{value:{x:1,y:1},type:"v2",glslType:"vec2"},Tiling_Caustic1477531952046_152_color:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_speed:{value:"0.5",type:"f",glslType:"float"},Tiling_Caustic1477531952046_152_brightness:{value:"1.5",type:"f",glslType:"float"},noiseImage:{value:null,type:"t",glslType:"sampler2D"},distortion:{value:"2",type:"f",glslType:"float"},contrast:{value:"1.5",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_speed:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_color:{value:{r:1,g:.2823529411764706,b:.4823529411764706},type:"c",glslType:"vec3"},Noise_Ripples1477531959288_166_brightness:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_resolution:{value:{x:"2",y:"2"},type:"v2",glslType:"vec2"},amplitude:{value:"2",type:"f",glslType:"float"},frequency:{value:"2",type:"f",glslType:"float"},highlightIntensity:{value:"0.4",type:"f",glslType:"float"},highlightColor:{value:{r:1,g:.5450980392156862,b:.23529411764705882},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_color:{value:{r:0,g:0,b:0},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_speed:{value:"1",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_color:{value:{r:1,g:.5294117647058824,b:.8156862745098039},type:"c",glslType:"vec3"},Transparent_Glow1477532059126_201_start:{value:"0.54674743",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_end:{value:"0.44399246",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_alpha:{value:"0.5",type:"f",glslType:"float"},Glow_Effect1477532183055_216_color:{value:{r:"1",g:"1",b:"1"},type:"c",glslType:"vec3"},Glow_Effect1477532183055_216_start:{value:"0",type:"f",glslType:"float"},Glow_Effect1477532183055_216_end:{value:"1.9",type:"f",glslType:"float"},Glow_Effect1477532183055_216_alpha:{value:"1",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/2901",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},a={id:2894,name:"Green Dance",fragment:"#define PI 3.1415926535897932384626433832795\n\nprecision highp float;\nprecision highp int;\nuniform float time;\nuniform float Flowing_Image_Combination1547651045656_420_speed;\nuniform float Flowing_Image_Combination1547651045656_420_resolution;\nuniform sampler2D image1;\nuniform sampler2D image2;\nuniform vec3 Flowing_Image_Combination1547651045656_420_color;\nuniform vec3 Horizontal_Stripes1547651045669_423_color1;\nuniform vec3 Horizontal_Stripes1547651045669_423_color2;\nuniform float Horizontal_Stripes1547651045669_423_speed;\nuniform float Horizontal_Stripes1547651045669_423_multiplicationFactor;\nuniform vec3 Vertical_2_Color_Graident1547651045681_426_color1;\nuniform vec3 Vertical_2_Color_Graident1547651045681_426_color2;\nuniform float Checkerboard1547651045687_429_multiplicationFactor;\nuniform float Borg_Hull1547651045698_432_speed;\nuniform float Borg_Hull1547651045698_432_resolution;\nuniform vec3 Borg_Hull1547651045698_432_color;\nuniform float brightness;\nuniform float Disco_Dots1547651045724_435_speed;\nuniform vec2 Disco_Dots1547651045724_435_resolution;\nuniform vec3 Disco_Dots1547651045724_435_color;\nvarying vec2 Flowing_Image_Combination1547651045656_420_vUv;\nvarying vec2 Horizontal_Stripes1547651045669_423_vUv;\nvarying vec2 Vertical_2_Color_Graident1547651045681_426_vUv;\nvarying vec2 Checkerboard1547651045687_429_vUv;\nvarying vec3 vPosition;\nvarying vec2 Borg_Hull1547651045698_432_vUv;\nvec2 circuit(vec2 p) \n    {\n        p = fract(p);\n        float r = 5.123;\n        float v = 0.0, g = 0.0;\n        r = fract(r * 9184.928);\n        float cp, d;\n        d = p.x;\n        g += pow(clamp(1.0 - abs(d), 0.0, 1.0), 1000.0);\n        d = p.y;\n        g += pow(clamp(1.0 - abs(d), 0.0, 1.0), 1000.0);\n        d = p.x - 1.0;\n        g += pow(clamp(3.0 - abs(d), 0.0, 1.0), 1000.0);\n        d = p.y - 1.0;\n        g += pow(clamp(1.0 - abs(d), 0.0, 1.0), 10000.0);\n        const int iter = 20;\n        for (int i = 0;\n i < iter; i++) \n        {\n            cp = 0.5 + (r - 0.5) * 0.9;\n            d = p.x - cp;\n            g += pow(clamp(1. - abs(d), 0.0, 1.0), 200.0);\n            if (d > 0.0) \n            {\n                r = fract(r * 4829.013);\n                p.x = (p.x - cp) / (1.0 - cp);\n                v += 1.0;\n            }\n else \n            {\n                r = fract(r * 1239.528);\n                p.x = p.x / cp;\n            }\n            p = p.yx;\n        }\n        v /= float(iter);\n        return vec2(g, v);\n    }\nvarying vec2 Disco_Dots1547651045724_435_vUv;\nfloat rand(vec2 co) \n    {\n        return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n    }\nvec4 Flowing_Image_Combination1547651045656_420_main() \n    {\n        vec4 Flowing_Image_Combination1547651045656_420_gl_FragColor = vec4(0.0);\n        vec2 uv = Flowing_Image_Combination1547651045656_420_vUv.xy * Flowing_Image_Combination1547651045656_420_resolution;\n        vec4 texCol = vec4(texture2D(image1, uv));\n        mat3 tfm;\n        tfm[0] = vec3(texCol.z, 0.0, 0);\n        tfm[1] = vec3(0.0, texCol.y, 0);\n        tfm[2] = vec3(0, 0, 1.0);\n        vec2 muv = (vec3(uv, 1.0) * tfm).xy + time * Flowing_Image_Combination1547651045656_420_speed;\n        texCol = vec4(vec3(texture2D(image2, muv)) * Flowing_Image_Combination1547651045656_420_color, 1.0);\n        Flowing_Image_Combination1547651045656_420_gl_FragColor = texCol;\n        return Flowing_Image_Combination1547651045656_420_gl_FragColor *= 1.0;\n    }\nvec4 Horizontal_Stripes1547651045669_423_main() \n    {\n        vec4 Horizontal_Stripes1547651045669_423_gl_FragColor = vec4(0.0);\n        float x = fract((Horizontal_Stripes1547651045669_423_vUv.y + (time * Horizontal_Stripes1547651045669_423_speed)) * Horizontal_Stripes1547651045669_423_multiplicationFactor);\n        float f = smoothstep(0.40, 0.5, x) - smoothstep(0.90, 1.0, x);\n        Horizontal_Stripes1547651045669_423_gl_FragColor = vec4(mix(Horizontal_Stripes1547651045669_423_color2, Horizontal_Stripes1547651045669_423_color1, f), 1.0);\n        return Horizontal_Stripes1547651045669_423_gl_FragColor *= 0.3;\n    }\nvec4 Vertical_2_Color_Graident1547651045681_426_main(void) \n    {\n        vec4 Vertical_2_Color_Graident1547651045681_426_gl_FragColor = vec4(0.0);\n        vec3 mixCol = mix(Vertical_2_Color_Graident1547651045681_426_color2, Vertical_2_Color_Graident1547651045681_426_color1, Vertical_2_Color_Graident1547651045681_426_vUv.y);\n        Vertical_2_Color_Graident1547651045681_426_gl_FragColor = vec4(mixCol, 1.);\n        return Vertical_2_Color_Graident1547651045681_426_gl_FragColor *= 1.0;\n    }\nvec4 Checkerboard1547651045687_429_main() \n    {\n        vec4 Checkerboard1547651045687_429_gl_FragColor = vec4(0.0);\n        vec2 t = Checkerboard1547651045687_429_vUv * Checkerboard1547651045687_429_multiplicationFactor;\n        vec3 p = vPosition * Checkerboard1547651045687_429_multiplicationFactor;\n        vec3 color;\n        if (mod(floor(t.x) + floor(t.y), 2.0) == 1.0) color = vec3(1.0, 1.0, 1.0);\n else color = vec3(0.0, 0.0, 0.0);\n        Checkerboard1547651045687_429_gl_FragColor = vec4(color, 1.0);\n        return Checkerboard1547651045687_429_gl_FragColor *= -0.5;\n    }\nvec4 Borg_Hull1547651045698_432_main() \n    {\n        vec4 Borg_Hull1547651045698_432_gl_FragColor = vec4(0.0);\n        float scale = 2.0;\n        vec2 uv = (Borg_Hull1547651045698_432_vUv.yx - 0.5) * Borg_Hull1547651045698_432_resolution;\n        uv = uv * scale + vec2(0.0, time * Borg_Hull1547651045698_432_speed);\n        vec2 cid2 = floor(uv);\n        float cid = (cid2.y * 10.0 + cid2.x) * 0.1;\n        vec2 dg = circuit(uv);\n        float d = dg.x;\n        vec3 col1 = (brightness - vec3(max(min(d, 2.0) - 1.0, 0.0) * 2.0 * 0.25)) * Borg_Hull1547651045698_432_color;\n        Borg_Hull1547651045698_432_gl_FragColor = vec4(col1, 1.0);\n        return Borg_Hull1547651045698_432_gl_FragColor *= -0.7;\n    }\nvec4 Disco_Dots1547651045724_435_main(void) \n    {\n        vec4 Disco_Dots1547651045724_435_gl_FragColor = vec4(0.0);\n        vec2 v = Disco_Dots1547651045724_435_vUv.xy * Disco_Dots1547651045724_435_resolution;\n        float brightness = fract(rand(floor(v)) + time * Disco_Dots1547651045724_435_speed);\n        brightness *= 0.5 - length(fract(v) - vec2(0.5, 0.5));\n        Disco_Dots1547651045724_435_gl_FragColor = vec4(2.0 * brightness * Disco_Dots1547651045724_435_color, 1.0);\n        return Disco_Dots1547651045724_435_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = (Flowing_Image_Combination1547651045656_420_main() + Horizontal_Stripes1547651045669_423_main() + Vertical_2_Color_Graident1547651045681_426_main() + Checkerboard1547651045687_429_main() + Borg_Hull1547651045698_432_main() + Disco_Dots1547651045724_435_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec2 Flowing_Image_Combination1547651045656_420_vUv;\nvarying vec2 Horizontal_Stripes1547651045669_423_vUv;\nvarying vec2 Vertical_2_Color_Graident1547651045681_426_vUv;\nvarying vec2 Checkerboard1547651045687_429_vUv;\nvarying vec3 vPosition;\nvarying vec2 Borg_Hull1547651045698_432_vUv;\nvarying vec2 Disco_Dots1547651045724_435_vUv;\nvec4 Flowing_Image_Combination1547651045656_420_main() \n    {\n        vec4 Flowing_Image_Combination1547651045656_420_gl_Position = vec4(0.0);\n        Flowing_Image_Combination1547651045656_420_vUv = uv;\n        Flowing_Image_Combination1547651045656_420_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Flowing_Image_Combination1547651045656_420_gl_Position *= 1.0;\n    }\nvec4 Horizontal_Stripes1547651045669_423_main() \n    {\n        vec4 Horizontal_Stripes1547651045669_423_gl_Position = vec4(0.0);\n        Horizontal_Stripes1547651045669_423_vUv = uv;\n        Horizontal_Stripes1547651045669_423_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Horizontal_Stripes1547651045669_423_gl_Position *= 0.3;\n    }\nvec4 Vertical_2_Color_Graident1547651045681_426_main() \n    {\n        vec4 Vertical_2_Color_Graident1547651045681_426_gl_Position = vec4(0.0);\n        Vertical_2_Color_Graident1547651045681_426_vUv = uv;\n        Vertical_2_Color_Graident1547651045681_426_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Vertical_2_Color_Graident1547651045681_426_gl_Position *= 1.0;\n    }\nvec4 Checkerboard1547651045687_429_main() \n    {\n        vec4 Checkerboard1547651045687_429_gl_Position = vec4(0.0);\n        Checkerboard1547651045687_429_vUv = uv;\n        vPosition = position;\n        Checkerboard1547651045687_429_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Checkerboard1547651045687_429_gl_Position *= -0.5;\n    }\nvec4 Borg_Hull1547651045698_432_main() \n    {\n        vec4 Borg_Hull1547651045698_432_gl_Position = vec4(0.0);\n        Borg_Hull1547651045698_432_vUv = uv;\n        Borg_Hull1547651045698_432_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Borg_Hull1547651045698_432_gl_Position *= -0.7;\n    }\nvec4 Disco_Dots1547651045724_435_main() \n    {\n        vec4 Disco_Dots1547651045724_435_gl_Position = vec4(0.0);\n        Disco_Dots1547651045724_435_vUv = uv;\n        Disco_Dots1547651045724_435_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Disco_Dots1547651045724_435_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Flowing_Image_Combination1547651045656_420_main() + Horizontal_Stripes1547651045669_423_main() + Vertical_2_Color_Graident1547651045681_426_main() + Checkerboard1547651045687_429_main() + Borg_Hull1547651045698_432_main() + Disco_Dots1547651045724_435_main();    }\n",uniforms:{time:{type:"f",glslType:"float"},image1:{value:null,type:"t",glslType:"sampler2D"},image2:{value:null,type:"t",glslType:"sampler2D"},Flowing_Image_Combination1547651045656_420_speed:{value:"0.1",type:"f",glslType:"float"},Flowing_Image_Combination1547651045656_420_resolution:{value:"2",type:"f",glslType:"float"},Flowing_Image_Combination1547651045656_420_color:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},Horizontal_Stripes1547651045669_423_color1:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},Horizontal_Stripes1547651045669_423_color2:{value:{r:0,g:0,b:0},type:"c",glslType:"vec3"},Horizontal_Stripes1547651045669_423_speed:{value:"0",type:"f",glslType:"float"},Horizontal_Stripes1547651045669_423_multiplicationFactor:{value:"6",type:"f",glslType:"float"},Vertical_2_Color_Graident1547651045681_426_color1:{value:{r:0,g:0,b:0},type:"c",glslType:"vec3"},Vertical_2_Color_Graident1547651045681_426_color2:{value:{r:0,g:.9764705882352941,b:0},type:"c",glslType:"vec3"},Checkerboard1547651045687_429_multiplicationFactor:{value:"12",type:"f",glslType:"float"},brightness:{value:"0.25",type:"f",glslType:"float"},Borg_Hull1547651045698_432_speed:{value:"0.001",type:"f",glslType:"float"},Borg_Hull1547651045698_432_resolution:{value:"1",type:"f",glslType:"float"},Borg_Hull1547651045698_432_color:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},Disco_Dots1547651045724_435_speed:{value:"0.01",type:"f",glslType:"float"},Disco_Dots1547651045724_435_resolution:{value:{x:"12",y:"12",z:0},type:"v2",glslType:"vec2"},Disco_Dots1547651045724_435_color:{value:{r:.5254901960784314,g:.9725490196078431,b:.6352941176470588},type:"c",glslType:"vec3"}},url:"http://shaderfrog.com/app/view/2894",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/sirfizx"}},r={id:2987,name:"Cosmic Shader",fragment:"#define TAU 6.28318530718\n#define MAX_ITER 5\n#define tau 6.2831853\n\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform vec2 Tiling_Caustic1477531952046_152_resolution;\nuniform vec3 backgroundColor;\nuniform vec3 Tiling_Caustic1477531952046_152_color;\nuniform float Tiling_Caustic1477531952046_152_speed;\nuniform float Tiling_Caustic1477531952046_152_brightness;\nuniform float time;\nuniform float contrast;\nuniform float distortion;\nuniform float Noise_Ripples1477531959288_166_speed;\nuniform vec3 Noise_Ripples1477531959288_166_color;\nuniform float Noise_Ripples1477531959288_166_brightness;\nuniform sampler2D noiseImage;\nuniform vec2 Noise_Ripples1477531959288_166_resolution;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform float highlightIntensity;\nuniform vec3 highlightColor;\nuniform vec3 Wiggly_Improved1477532051339_181_color;\nuniform vec3 Transparent_Glow1477532059126_201_color;\nuniform float Transparent_Glow1477532059126_201_start;\nuniform float Transparent_Glow1477532059126_201_end;\nuniform float Transparent_Glow1477532059126_201_alpha;\nuniform vec3 Glow_Effect1477532183055_216_color;\nuniform float Glow_Effect1477532183055_216_start;\nuniform float Glow_Effect1477532183055_216_end;\nuniform float Glow_Effect1477532183055_216_alpha;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nmat2 makem2(in float theta) \n    {\n        float c = cos(theta);\n        float s = sin(theta);\n        return mat2(c, -s, s, c);\n    }\nfloat noise(in vec2 x) \n    {\n        return texture2D(noiseImage, x * .01).x;\n    }\nfloat fbm(in vec2 p) \n    {\n        float z = 2.;\n        float rz = 0.;\n        vec2 bp = p;\n        for (float i = 1.;\n i < 6.0; i++) \n        {\n            rz += abs((noise(p) - 0.5) * 2.0) / z;\n            z = z * 2.;\n            p = p * 2.;\n        }\n        return rz;\n    }\nfloat dualfbm(in vec2 p) \n    {\n        vec2 p2 = p * distortion;\n        vec2 basis = vec2(fbm(p2 - time * Noise_Ripples1477531959288_166_speed * 1.6), fbm(p2 + time * Noise_Ripples1477531959288_166_speed * 1.7));\n        basis = (basis - .5) * .2;\n        p += basis;\n        return fbm(p * makem2(time * Noise_Ripples1477531959288_166_speed * 0.2));\n    }\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_FragColor = vec4(0.0);\n        vec2 uv = Tiling_Caustic1477531952046_152_vUv * Tiling_Caustic1477531952046_152_resolution;\n        vec2 p = mod(uv * TAU, TAU) - 250.0;\n        vec2 i = vec2(p);\n        float c = 1.0;\n        float inten = 0.005;\n        for (int n = 0;\n n < MAX_ITER; n++) \n        {\n            float t = time * Tiling_Caustic1477531952046_152_speed * (1.0 - (3.5 / float(n + 1)));\n            i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n            c += 1.0 / length(vec2(p.x / (sin(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n        }\n        c /= float(MAX_ITER);\n        c = 1.17 - pow(c, Tiling_Caustic1477531952046_152_brightness);\n        vec3 rgb = vec3(pow(abs(c), 8.0));\n        Tiling_Caustic1477531952046_152_gl_FragColor = vec4(rgb * Tiling_Caustic1477531952046_152_color + backgroundColor, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_FragColor *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_FragColor = vec4(0.0);\n        vec2 p = (Noise_Ripples1477531959288_166_vUv.xy - 0.5) * Noise_Ripples1477531959288_166_resolution;\n        float rz = dualfbm(p);\n        vec3 col = (Noise_Ripples1477531959288_166_color / rz) * Noise_Ripples1477531959288_166_brightness;\n        col = ((col - 0.5) * max(contrast, 0.0)) + 0.5;\n        Noise_Ripples1477531959288_166_gl_FragColor = vec4(col, 1.0);\n        return Noise_Ripples1477531959288_166_gl_FragColor *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_FragColor = vec4(0.0);\n        Wiggly_Improved1477532051339_181_gl_FragColor = vec4(clamp(highlightColor * highlightIntensity * light, 0.0, 1.0), 1.0);\n        return Wiggly_Improved1477532051339_181_gl_FragColor *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Transparent_Glow1477532059126_201_fNormal);\n        vec3 eye = normalize(-Transparent_Glow1477532059126_201_fPosition.xyz);\n        float rim = smoothstep(Transparent_Glow1477532059126_201_start, Transparent_Glow1477532059126_201_end, 1.0 - dot(normal, eye));\n        float value = clamp(rim * Transparent_Glow1477532059126_201_alpha, 0.0, 1.0);\n        Transparent_Glow1477532059126_201_gl_FragColor = vec4(Transparent_Glow1477532059126_201_color * value, value);\n        return Transparent_Glow1477532059126_201_gl_FragColor *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Glow_Effect1477532183055_216_fNormal);\n        vec3 eye = normalize(-Glow_Effect1477532183055_216_fPosition.xyz);\n        float rim = smoothstep(Glow_Effect1477532183055_216_start, Glow_Effect1477532183055_216_end, 1.0 - dot(normal, eye));\n        Glow_Effect1477532183055_216_gl_FragColor = vec4(clamp(rim, 0.0, 1.0) * Glow_Effect1477532183055_216_alpha * Glow_Effect1477532183055_216_color, 1.0);\n        return Glow_Effect1477532183055_216_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = (Glow_Effect1477532183055_216_main() + Noise_Ripples1477531959288_166_main() + Tiling_Caustic1477531952046_152_main() + Wiggly_Improved1477532051339_181_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform float Wiggly_Improved1477532051339_181_speed;\nuniform float frequency;\nuniform float amplitude;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 Tiling_Caustic1477531952046_152_vPosition;\nvarying vec3 Tiling_Caustic1477531952046_152_vNormal;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv2;\nvarying vec3 Noise_Ripples1477531959288_166_vPosition;\nvarying vec3 Noise_Ripples1477531959288_166_vNormal;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv2;\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Wiggly_Improved1477532051339_181_vPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_Position = vec4(0.0);\n        Tiling_Caustic1477531952046_152_vNormal = normal;\n        Tiling_Caustic1477531952046_152_vUv = uv;\n        Tiling_Caustic1477531952046_152_vUv2 = uv2;\n        Tiling_Caustic1477531952046_152_vPosition = position;\n        Tiling_Caustic1477531952046_152_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_Position *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_Position = vec4(0.0);\n        Noise_Ripples1477531959288_166_vNormal = normal;\n        Noise_Ripples1477531959288_166_vUv = uv;\n        Noise_Ripples1477531959288_166_vUv2 = uv2;\n        Noise_Ripples1477531959288_166_vPosition = position;\n        Noise_Ripples1477531959288_166_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Noise_Ripples1477531959288_166_gl_Position *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_Position = vec4(0.0);\n        vec3 offset = normalize(vec3(0.0) - position) * (amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + position.y * frequency));\n        vec3 newPosition = position + vec3(offset.x, 0.0, offset.z);\n        light = amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + 1.0 + position.y * frequency);\n        Wiggly_Improved1477532051339_181_vPosition = newPosition;\n        Wiggly_Improved1477532051339_181_gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n        return Wiggly_Improved1477532051339_181_gl_Position *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_Position = vec4(0.0);\n        Transparent_Glow1477532059126_201_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Transparent_Glow1477532059126_201_fPosition = pos.xyz;\n        Transparent_Glow1477532059126_201_gl_Position = projectionMatrix * pos;\n        return Transparent_Glow1477532059126_201_gl_Position *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_Position = vec4(0.0);\n        Glow_Effect1477532183055_216_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Glow_Effect1477532183055_216_fPosition = pos.xyz;\n        Glow_Effect1477532183055_216_gl_Position = projectionMatrix * pos;\n        return Glow_Effect1477532183055_216_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Tiling_Caustic1477531952046_152_main() + Noise_Ripples1477531959288_166_main() + Wiggly_Improved1477532051339_181_main() + Transparent_Glow1477532059126_201_main() + Glow_Effect1477532183055_216_main();    }\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},backgroundColor:{value:{r:.08235294117647059,g:.06274509803921569,b:.19607843137254902},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_resolution:{value:{x:1,y:1},type:"v2",glslType:"vec2"},Tiling_Caustic1477531952046_152_color:{value:{r:.4666666666666667,g:.9294117647058824,b:.9529411764705882},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_speed:{value:"0.5",type:"f",glslType:"float"},Tiling_Caustic1477531952046_152_brightness:{value:"1.5",type:"f",glslType:"float"},noiseImage:{value:null,type:"t",glslType:"sampler2D"},distortion:{value:"1",type:"f",glslType:"float"},contrast:{value:"1.4",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_speed:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_color:{value:{r:.6823529411764706,g:.7725490196078432,b:.6666666666666666},type:"c",glslType:"vec3"},Noise_Ripples1477531959288_166_brightness:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_resolution:{value:{x:"2",y:"2"},type:"v2",glslType:"vec2"},amplitude:{value:"0.2",type:"f",glslType:"float"},frequency:{value:"2",type:"f",glslType:"float"},highlightIntensity:{value:".5",type:"f",glslType:"float"},highlightColor:{value:{r:.8274509803921568,g:.5882352941176471,b:.2627450980392157},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_color:{value:{r:0,g:0,b:0},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_speed:{value:"1",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_color:{value:{r:.9803921568627451,g:.9215686274509803,b:.596078431372549},type:"c",glslType:"vec3"},Transparent_Glow1477532059126_201_start:{value:"0.54674743",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_end:{value:"0.44399246",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_alpha:{value:"0.5",type:"f",glslType:"float"},Glow_Effect1477532183055_216_color:{value:{r:.9921568627450981,g:.7254901960784313,b:.3411764705882353},type:"c",glslType:"vec3"},Glow_Effect1477532183055_216_start:{value:"0",type:"f",glslType:"float"},Glow_Effect1477532183055_216_end:{value:"1.9",type:"f",glslType:"float"},Glow_Effect1477532183055_216_alpha:{value:"2",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/2987",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},l={id:138,name:"Cool Tiles Shader",fragment:"precision highp float;\nprecision highp int;\nuniform float time;\nuniform float Flowing_Image_Combination1532324436254_38_speed;\nuniform float resolution;\nuniform sampler2D image1;\nuniform sampler2D image2;\nuniform vec3 Flowing_Image_Combination1532324436254_38_color;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform vec3 lightPosition;\nuniform sampler2D map;\nuniform vec3 diffuseColor;\nuniform vec3 specularColor;\nuniform float shininess;\nuniform vec2 scaleBias;\nuniform float scale;\nuniform float Disco_Ball1532324436329_44_speed;\nuniform vec3 Vignette1532324436351_47_color;\nuniform float intensity;\nuniform float spread;\nuniform float mirrorReflection;\nuniform samplerCube reflectionSampler;\nvarying vec2 Flowing_Image_Combination1532324436254_38_vUv;\nvarying vec3 vPosition;\nvarying vec3 Parallax_Mapping1532324436298_41_vNormal;\nvarying vec2 Parallax_Mapping1532324436298_41_vUv;\nvarying vec2 vUv2;\nvarying vec3 tsPosition;\nvarying vec3 tsCameraPosition;\nvarying vec3 tsLightSource;\nvarying vec3 Disco_Ball1532324436329_44_vNormal;\nvarying vec2 Disco_Ball1532324436329_44_vUv;\nfloat rand(in vec2 p) \n    {\n        return abs(fract(sin(p.x * 95325.328 + p.y * -48674.077) + cos(p.x * -46738.322 + p.y * 76485.077) + time * Disco_Ball1532324436329_44_speed) - .5) + .5;\n    }\nvarying vec2 Vignette1532324436351_47_vUv;\nvarying vec3 vReflect;\nvec4 Flowing_Image_Combination1532324436254_38_main() \n    {\n        vec4 Flowing_Image_Combination1532324436254_38_gl_FragColor = vec4(0.0);\n        vec2 uv = Flowing_Image_Combination1532324436254_38_vUv.xy * resolution;\n        vec4 texCol = vec4(texture2D(image1, uv));\n        mat3 tfm;\n        tfm[0] = vec3(texCol.z, 0.0, 0);\n        tfm[1] = vec3(0.0, texCol.y, 0);\n        tfm[2] = vec3(0, 0, 1.0);\n        vec2 muv = (vec3(uv, 1.0) * tfm).xy + time * Flowing_Image_Combination1532324436254_38_speed;\n        texCol = vec4(vec3(texture2D(image2, muv)) * Flowing_Image_Combination1532324436254_38_color, 1.0);\n        Flowing_Image_Combination1532324436254_38_gl_FragColor = texCol;\n        return Flowing_Image_Combination1532324436254_38_gl_FragColor *= 0.6;\n    }\nvec4 Parallax_Mapping1532324436298_41_main() \n    {\n        vec4 Parallax_Mapping1532324436298_41_gl_FragColor = vec4(0.0);\n        float height = texture2D(map, Parallax_Mapping1532324436298_41_vUv).a;\n        float v = height * scaleBias.r - scaleBias.g;\n        vec3 eye = normalize(tsCameraPosition);\n        vec2 newCoords = Parallax_Mapping1532324436298_41_vUv + (eye.xy * v);\n        vec3 color = vec3(0.0);\n        vec3 normal = texture2D(map, newCoords).rgb * 2.0 - 1.0;\n        vec3 viewVector = normalize(tsCameraPosition - tsPosition);\n        vec3 lightVector = normalize(tsLightSource - tsPosition);\n        float nxDir = max(0.0, dot(normal, lightVector));\n        float specularPower = 0.0;\n        if (nxDir != 0.0) \n        {\n            vec3 halfVector = normalize(lightVector + viewVector);\n            float nxHalf = max(0.0, dot(normal, halfVector));\n            specularPower = pow(nxHalf, shininess);\n        }\n         vec3 specular = specularColor * specularPower;\n        Parallax_Mapping1532324436298_41_gl_FragColor = vec4((diffuseColor * nxDir) + specular, 1.0);\n        return Parallax_Mapping1532324436298_41_gl_FragColor *= 0.9;\n    }\nvec4 Disco_Ball1532324436329_44_main(void) \n    {\n        vec4 Disco_Ball1532324436329_44_gl_FragColor = vec4(0.0);\n        vec2 position = (Disco_Ball1532324436329_44_vUv.xy) * scale;\n        vec3 color = vec3(rand(vec2(floor(position.x), floor(position.y))), rand(vec2(floor(position.x), floor(position.x))), rand(vec2(floor(position.x * .5), floor(position.y * .5))));\n        float scale = 1. - pow(pow((mod(position.x, 1.) - .5), 2.) + pow((mod(position.y, 1.) - .5), 2.), .7);\n        Disco_Ball1532324436329_44_gl_FragColor = vec4(color * scale, 1.);\n        return Disco_Ball1532324436329_44_gl_FragColor *= 0.1;\n    }\nvec4 Vignette1532324436351_47_main() \n    {\n        vec4 Vignette1532324436351_47_gl_FragColor = vec4(0.0);\n        float vignette = Vignette1532324436351_47_vUv.y * Vignette1532324436351_47_vUv.x * (1. - Vignette1532324436351_47_vUv.x) * (1. - Vignette1532324436351_47_vUv.y) * spread;\n        vec3 multiplier = 1.0 - (vignette * Vignette1532324436351_47_color * intensity);\n        Vignette1532324436351_47_gl_FragColor = vec4(clamp(Vignette1532324436351_47_color * multiplier, 0.0, 1.0), multiplier);\n        return Vignette1532324436351_47_gl_FragColor *= 0.2;\n    }\nvec4 Reflection_Cube_Map1532324436362_50_main() \n    {\n        vec4 Reflection_Cube_Map1532324436362_50_gl_FragColor = vec4(0.0);\n        vec4 cubeColor = textureCube(reflectionSampler, vec3(mirrorReflection * vReflect.x, vReflect.yz));\n        cubeColor.w = 1.0;\n        Reflection_Cube_Map1532324436362_50_gl_FragColor = cubeColor;\n        return Reflection_Cube_Map1532324436362_50_gl_FragColor *= 0.3;\n    }\nvoid main() \n    {\n        gl_FragColor = (Flowing_Image_Combination1532324436254_38_main() + Parallax_Mapping1532324436298_41_main() + Disco_Ball1532324436329_44_main() + Vignette1532324436351_47_main() + Reflection_Cube_Map1532324436362_50_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 lightPosition;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec2 Flowing_Image_Combination1532324436254_38_vUv;\nattribute vec4 tangent;\nvarying vec3 vPosition;\nvarying vec3 Parallax_Mapping1532324436298_41_vNormal;\nvarying vec2 Parallax_Mapping1532324436298_41_vUv;\nvarying vec2 vUv2;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 tsPosition;\nvarying vec3 tsCameraPosition;\nvarying vec3 tsLightSource;\nvarying vec2 Disco_Ball1532324436329_44_vUv;\nvarying vec3 Disco_Ball1532324436329_44_vNormal;\nvarying vec2 Vignette1532324436351_47_vUv;\nvarying vec3 vReflect;\nvec4 Flowing_Image_Combination1532324436254_38_main() \n    {\n        vec4 Flowing_Image_Combination1532324436254_38_gl_Position = vec4(0.0);\n        Flowing_Image_Combination1532324436254_38_vUv = uv;\n        Flowing_Image_Combination1532324436254_38_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Flowing_Image_Combination1532324436254_38_gl_Position *= 0.6;\n    }\nvec4 Parallax_Mapping1532324436298_41_main(void) \n    {\n        vec4 Parallax_Mapping1532324436298_41_gl_Position = vec4(0.0);\n        Parallax_Mapping1532324436298_41_vUv = uv;\n        vPosition = position;\n        Parallax_Mapping1532324436298_41_vNormal = normalize(normal);\n        vTangent = normalize(tangent.xyz);\n        vBinormal = normalize(cross(Parallax_Mapping1532324436298_41_vNormal, vTangent) * tangent.w);\n        mat3 TBNMatrix = mat3(vTangent, vBinormal, Parallax_Mapping1532324436298_41_vNormal);\n        tsPosition = position * TBNMatrix;\n        tsCameraPosition = cameraPosition * TBNMatrix;\n        tsLightSource = lightPosition * TBNMatrix;\n        Parallax_Mapping1532324436298_41_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Parallax_Mapping1532324436298_41_gl_Position *= 0.9;\n    }\nvec4 Disco_Ball1532324436329_44_main() \n    {\n        vec4 Disco_Ball1532324436329_44_gl_Position = vec4(0.0);\n        Disco_Ball1532324436329_44_vNormal = normal;\n        Disco_Ball1532324436329_44_vUv = uv;\n        Disco_Ball1532324436329_44_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Disco_Ball1532324436329_44_gl_Position *= 0.1;\n    }\nvec4 Vignette1532324436351_47_main() \n    {\n        vec4 Vignette1532324436351_47_gl_Position = vec4(0.0);\n        Vignette1532324436351_47_vUv = uv;\n        Vignette1532324436351_47_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Vignette1532324436351_47_gl_Position *= 0.2;\n    }\nvec4 Reflection_Cube_Map1532324436362_50_main() \n    {\n        vec4 Reflection_Cube_Map1532324436362_50_gl_Position = vec4(0.0);\n        vec3 worldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\n        vec3 cameraToVertex = normalize(worldPosition - cameraPosition);\n        vec3 worldNormal = normalize(mat3(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz) * normal);\n        vReflect = reflect(cameraToVertex, worldNormal);\n        Reflection_Cube_Map1532324436362_50_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Reflection_Cube_Map1532324436362_50_gl_Position *= 0.3;\n    }\nvoid main() \n    {\n        gl_Position = Flowing_Image_Combination1532324436254_38_main() + Parallax_Mapping1532324436298_41_main() + Disco_Ball1532324436329_44_main() + Vignette1532324436351_47_main() + Reflection_Cube_Map1532324436362_50_main();    }\n",uniforms:{resolution:{value:"1",type:"f",glslType:"float"},image1:{value:null,type:"t",glslType:"sampler2D"},image2:{value:null,type:"t",glslType:"sampler2D"},time:{type:"f",glslType:"float"},Flowing_Image_Combination1532324436254_38_speed:{value:"0.05",type:"f",glslType:"float"},Flowing_Image_Combination1532324436254_38_color:{value:{r:1,g:"1",b:"1"},type:"c",glslType:"vec3"},map:{value:null,type:"t",glslType:"sampler2D"},diffuseColor:{value:{r:.2235294117647059,g:.2235294117647059,b:.2235294117647059},type:"c",glslType:"vec3"},specularColor:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},shininess:{value:"10",type:"f",glslType:"float"},scaleBias:{value:{x:"0.04",y:"0.001",z:0},type:"v2",glslType:"vec2"},Parallax_Mapping1532324436298_41_lightPosition:{value:{x:-.04058137118438604,y:.3281411389717793,z:2.4780388506290807},type:"v3",glslType:"vec3"},scale:{value:"4",type:"f",glslType:"float"},Disco_Ball1532324436329_44_speed:{value:"1",type:"f",glslType:"float"},intensity:{value:"0.5",type:"f",glslType:"float"},spread:{value:"100",type:"f",glslType:"float"},Vignette1532324436351_47_color:{value:{r:.8980392156862745,g:.9607843137254902,b:.9921568627450981},type:"c",glslType:"vec3"},mirrorReflection:{value:"1",type:"f",glslType:"float"},reflectionSampler:{value:null,type:"t",glslType:"samplerCube"}},url:"http://shaderfrog.com/app/view/138",user:{username:"andrewray",url:"http://shaderfrog.com/app/profile/andrewray"}},s={id:3033,name:"Disco Shader",fragment:"precision highp float;\nprecision highp int;\nuniform float time;\nuniform float scale;\nuniform float speed;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nfloat rand(in vec2 p) \n    {\n        return abs(fract(sin(p.x * 95325.328 + p.y * -48674.077) + cos(p.x * -46738.322 + p.y * 76485.077) + time * speed) - .5) + .5;\n    }\nvec4 Disco_Ball1551665981578_213_main(void) \n    {\n        vec4 Disco_Ball1551665981578_213_gl_FragColor = vec4(0.0);\n        vec2 position = (vUv.xy) * scale;\n        vec3 color = vec3(rand(vec2(floor(position.x), floor(position.y))), rand(vec2(floor(position.x), floor(position.x))), rand(vec2(floor(position.x * .5), floor(position.y * .5))));\n        float scale = 1. - pow(pow((mod(position.x, 1.) - .5), 2.) + pow((mod(position.y, 1.) - .5), 2.), .7);\n        Disco_Ball1551665981578_213_gl_FragColor = vec4(color * scale, 1.);\n        return Disco_Ball1551665981578_213_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = Disco_Ball1551665981578_213_main();    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvec4 Disco_Ball1551665981578_213_main() \n    {\n        vec4 Disco_Ball1551665981578_213_gl_Position = vec4(0.0);\n        vNormal = normal;\n        vUv = uv;\n        Disco_Ball1551665981578_213_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Disco_Ball1551665981578_213_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Disco_Ball1551665981578_213_main();    }\n",uniforms:{time:{type:"f",glslType:"float"},scale:{value:"30",type:"f",glslType:"float"},speed:{value:"1",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/3033",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},c={id:3053,name:"Marching Ants Shader",fragment:"precision highp float;\nprecision highp int;\nuniform float edgeWidth;\nuniform float sharpness;\nuniform float antSize;\nuniform float antSpeed;\nuniform float time;\nuniform vec3 color;\nvarying vec2 vUv;\nvec4 Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_main() \n    {\n        vec4 Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_gl_FragColor = vec4(0.0);\n        vec2 borderUv = abs((vUv - 0.5) * 2.0);\n        float leftRight = clamp((borderUv.x - (1.0 - edgeWidth)) * sharpness, 0.0, 1.0);\n        float upDown = clamp((borderUv.y - (1.0 - edgeWidth)) * sharpness, 0.0, 1.0);\n        vec2 antUv = vUv * antSize;\n        float antOffset = time * antSpeed;\n        if (mod(floor(antUv.x + antOffset), 2.0) != 1.0) \n        {\n            upDown = 0.0;\n        }\n         if (mod(floor(antUv.y + antOffset), 2.0) != 1.0) \n        {\n            leftRight = 0.0;\n        }\n         float alpha = clamp(leftRight + upDown, 0.0, 1.0);\n        Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_gl_FragColor = vec4(color * alpha, alpha);\n        return Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_main();    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec2 vUv;\nvec4 Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_main() \n    {\n        vec4 Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_gl_Position = vec4(0.0);\n        vUv = uv;\n        Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_main();    }\n",uniforms:{color:{value:{r:"1",g:"1",b:"1"},type:"c",glslType:"vec3"},edgeWidth:{value:"0.1",type:"f",glslType:"float"},sharpness:{value:"100",type:"f",glslType:"float"},antSize:{value:"10",type:"f",glslType:"float"},antSpeed:{value:"1",type:"f",glslType:"float"},time:{type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/3053",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},v={id:3060,name:"Goo Shader",fragment:"precision highp float;\nprecision highp int;\nuniform vec3 color;\nuniform float time;\nuniform float Configurable_Oil_Spill1525321525720_28_speed;\nuniform vec3 color1;\nuniform vec3 color2;\nuniform vec3 color3;\nuniform vec3 color4;\nvarying float vNoise;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nfloat rand(vec2 n) \n    {\n        return fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n    }\nfloat noise(vec2 n) \n    {\n        const vec2 d = vec2(0.0, 1.0);\n        vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n        return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n    }\nfloat fbm(vec2 n) \n    {\n        float total = 0.0, amplitude = 1.0;\n        for (int i = 0;\n i < 7; i++) \n        {\n            total += noise(n) * amplitude;\n            n += n;\n            amplitude *= 0.5;\n        }\n        return total;\n    }\nvec4 Big_Wiggles1525321525655_25_main() \n    {\n        vec4 Big_Wiggles1525321525655_25_gl_FragColor = vec4(0.0);\n        Big_Wiggles1525321525655_25_gl_FragColor = vec4(color * vNoise, 1.0);\n        return Big_Wiggles1525321525655_25_gl_FragColor *= 1.0;\n    }\nvec4 Configurable_Oil_Spill1525321525720_28_main() \n    {\n        vec4 Configurable_Oil_Spill1525321525720_28_gl_FragColor = vec4(0.0);\n        const vec3 c5 = vec3(0.1);\n        const vec3 c6 = vec3(0.9);\n        vec2 p = vUv.xy * 8.0;\n        float timed = time * Configurable_Oil_Spill1525321525720_28_speed;\n        float q = fbm(p - timed * 0.1);\n        vec2 r = vec2(fbm(p + q + timed * 0.7 - p.x - p.y), fbm(p + q - timed * 0.4));\n        vec3 c = mix(color1, color2, fbm(p + r)) + mix(color3, color4, r.x) - mix(c5, c6, r.y);\n        Configurable_Oil_Spill1525321525720_28_gl_FragColor = vec4(c * cos(1.57 * vUv.y), 1.0);\n        return Configurable_Oil_Spill1525321525720_28_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = (Big_Wiggles1525321525655_25_main() + Configurable_Oil_Spill1525321525720_28_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform float scale;\nuniform float displacement;\nuniform float time;\nuniform float Big_Wiggles1525321525655_25_speed;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying float vNoise;\nvec3 mod289(vec3 x) \n    {\n        return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\nvec4 mod289(vec4 x) \n    {\n        return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\nvec4 permute(vec4 x) \n    {\n        return mod289(((x * 34.0) + 1.0) * x);\n    }\nvec4 taylorInvSqrt(vec4 r) \n    {\n        return 1.79284291400159 - 0.85373472095314 * r;\n    }\nvec3 fade(vec3 t) \n    {\n        return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n    }\nfloat cnoise(vec3 P) \n    {\n        vec3 Pi0 = floor(P);\n        vec3 Pi1 = Pi0 + vec3(1.0);\n        Pi0 = mod289(Pi0);\n        Pi1 = mod289(Pi1);\n        vec3 Pf0 = fract(P);\n        vec3 Pf1 = Pf0 - vec3(1.0);\n        vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n        vec4 iy = vec4(Pi0.yy, Pi1.yy);\n        vec4 iz0 = Pi0.zzzz;\n        vec4 iz1 = Pi1.zzzz;\n        vec4 ixy = permute(permute(ix) + iy);\n        vec4 ixy0 = permute(ixy + iz0);\n        vec4 ixy1 = permute(ixy + iz1);\n        vec4 gx0 = ixy0 * (1.0 / 7.0);\n        vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n        gx0 = fract(gx0);\n        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n        vec4 sz0 = step(gz0, vec4(0.0));\n        gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n        gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n        vec4 gx1 = ixy1 * (1.0 / 7.0);\n        vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n        gx1 = fract(gx1);\n        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n        vec4 sz1 = step(gz1, vec4(0.0));\n        gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n        gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n        vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\n        vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\n        vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\n        vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\n        vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\n        vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\n        vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\n        vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\n        vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n        g000 *= norm0.x;\n        g010 *= norm0.y;\n        g100 *= norm0.z;\n        g110 *= norm0.w;\n        vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n        g001 *= norm1.x;\n        g011 *= norm1.y;\n        g101 *= norm1.z;\n        g111 *= norm1.w;\n        float n000 = dot(g000, Pf0);\n        float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n        float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n        float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n        float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n        float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n        float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n        float n111 = dot(g111, Pf1);\n        vec3 fade_xyz = fade(Pf0);\n        vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n        vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n        float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n        return 2.2 * n_xyz;\n    }\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvec4 Big_Wiggles1525321525655_25_main() \n    {\n        vec4 Big_Wiggles1525321525655_25_gl_Position = vec4(0.0);\n        vNoise = cnoise(normalize(position) * scale + (time * Big_Wiggles1525321525655_25_speed));\n        vec3 pos = position + normal * vNoise * vec3(displacement);\n        Big_Wiggles1525321525655_25_gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n        return Big_Wiggles1525321525655_25_gl_Position *= 1.0;\n    }\nvec4 Configurable_Oil_Spill1525321525720_28_main() \n    {\n        vec4 Configurable_Oil_Spill1525321525720_28_gl_Position = vec4(0.0);\n        vUv = uv;\n        vPosition = position;\n        vNormal = normal;\n        Configurable_Oil_Spill1525321525720_28_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Configurable_Oil_Spill1525321525720_28_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Big_Wiggles1525321525655_25_main() + Configurable_Oil_Spill1525321525720_28_main();    }\n",uniforms:{scale:{value:".8",type:"f",glslType:"float"},displacement:{value:".5",type:"f",glslType:"float"},time:{type:"f",glslType:"float"},Big_Wiggles1525321525655_25_speed:{value:".3",type:"f",glslType:"float"},color:{value:{r:".3",g:0,b:0},type:"c",glslType:"vec3"},color1:{value:{r:".4",g:".1",b:".2"},type:"c",glslType:"vec3"},color2:{value:{r:".5",g:"1",b:".5"},type:"c",glslType:"vec3"},color3:{value:{r:".2",g:".9",b:0},type:"c",glslType:"vec3"},color4:{value:{r:"1.1",g:"1.1",b:"2"},type:"c",glslType:"vec3"},Configurable_Oil_Spill1525321525720_28_speed:{value:".4",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/3060",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},_={id:3055,name:"Psycho Shader",fragment:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform vec2 Randomise_Fractal;\nuniform float NUM_SIDES;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nconst float PI = 3.14159265359;\nfloat KA = PI / NUM_SIDES;\nvoid koleidoscope(inout vec2 uv) \n    {\n        float angle = atan(uv.y, uv.x);\n        angle = mod(angle, 2.0 * KA);\n        angle = abs(angle - KA);\n        angle += 0.1 * time;\n        float d = length(uv);\n        uv = d * vec2(cos(angle), sin(angle));\n    }\nvoid smallKoleidoscope(inout vec2 uv) \n    {\n        float angle = abs(mod(atan(uv.y, uv.x), 2.0 * KA) - KA) + 0.1 * time;\n        uv = length(uv) * vec2(cos(angle), sin(angle));\n    }\nvec4 Kaleidoscope_Fractal_Shader1551694817060_1634_main() \n    {\n        vec4 Kaleidoscope_Fractal_Shader1551694817060_1634_gl_FragColor = vec4(0.0);\n        vec2 uv = 12.0 * (2.0 * vUv.xy - 1.0);\n        smallKoleidoscope(uv);\n        vec3 p = vec3(uv, Randomise_Fractal.x);\n        for (int i = 0;\n i < 44; i++) p.xzy = vec3(1.3, 0.999, 0.678) * abs((abs(p) / dot(p, p) - vec3(1.0, 1.02, Randomise_Fractal.y * 0.4)));\n        Kaleidoscope_Fractal_Shader1551694817060_1634_gl_FragColor = vec4(p, 1.0);\n        return Kaleidoscope_Fractal_Shader1551694817060_1634_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = Kaleidoscope_Fractal_Shader1551694817060_1634_main();    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nvec4 Kaleidoscope_Fractal_Shader1551694817060_1634_main() \n    {\n        vec4 Kaleidoscope_Fractal_Shader1551694817060_1634_gl_Position = vec4(0.0);\n        vNormal = normal;\n        vUv = uv;\n        vUv2 = uv2;\n        vPosition = position;\n        Kaleidoscope_Fractal_Shader1551694817060_1634_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Kaleidoscope_Fractal_Shader1551694817060_1634_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Kaleidoscope_Fractal_Shader1551694817060_1634_main();    }\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},Randomise_Fractal:{value:{x:.5076923076923077,y:.7076923076923077},type:"v2",glslType:"vec2"},NUM_SIDES:{value:"12",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/3055",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},d={id:3301,name:"Ova Shader",fragment:"precision highp float;\nprecision highp int;\nuniform float time;\nuniform vec3 color1;\nuniform vec3 color2;\nvarying vec3 vPosition;\nvarying float vJitter;\nvec3 permute(vec3 x) \n    {\n        return mod((34.0 * x + 1.0) * x, 289.0);\n    }\nvec3 dist(vec3 x, vec3 y, vec3 z) \n    {\n        return x * x + y * y + z * z;\n    }\nvec2 worley(vec3 P, float jitter) \n    {\n        float K = 0.142857142857;\n        float Ko = 0.428571428571;\n        float K2 = 0.020408163265306;\n        float Kz = 0.166666666667;\n        float Kzo = 0.416666666667;\n        vec3 Pi = mod(floor(P), 289.0);\n        vec3 Pf = fract(P) - 0.5;\n        vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\n        vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\n        vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\n        vec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));\n        vec3 p1 = permute(p + Pi.y - 1.0);\n        vec3 p2 = permute(p + Pi.y);\n        vec3 p3 = permute(p + Pi.y + 1.0);\n        vec3 p11 = permute(p1 + Pi.z - 1.0);\n        vec3 p12 = permute(p1 + Pi.z);\n        vec3 p13 = permute(p1 + Pi.z + 1.0);\n        vec3 p21 = permute(p2 + Pi.z - 1.0);\n        vec3 p22 = permute(p2 + Pi.z);\n        vec3 p23 = permute(p2 + Pi.z + 1.0);\n        vec3 p31 = permute(p3 + Pi.z - 1.0);\n        vec3 p32 = permute(p3 + Pi.z);\n        vec3 p33 = permute(p3 + Pi.z + 1.0);\n        vec3 ox11 = fract(p11 * K) - Ko;\n        vec3 oy11 = mod(floor(p11 * K), 7.0) * K - Ko;\n        vec3 oz11 = floor(p11 * K2) * Kz - Kzo;\n        vec3 ox12 = fract(p12 * K) - Ko;\n        vec3 oy12 = mod(floor(p12 * K), 7.0) * K - Ko;\n        vec3 oz12 = floor(p12 * K2) * Kz - Kzo;\n        vec3 ox13 = fract(p13 * K) - Ko;\n        vec3 oy13 = mod(floor(p13 * K), 7.0) * K - Ko;\n        vec3 oz13 = floor(p13 * K2) * Kz - Kzo;\n        vec3 ox21 = fract(p21 * K) - Ko;\n        vec3 oy21 = mod(floor(p21 * K), 7.0) * K - Ko;\n        vec3 oz21 = floor(p21 * K2) * Kz - Kzo;\n        vec3 ox22 = fract(p22 * K) - Ko;\n        vec3 oy22 = mod(floor(p22 * K), 7.0) * K - Ko;\n        vec3 oz22 = floor(p22 * K2) * Kz - Kzo;\n        vec3 ox23 = fract(p23 * K) - Ko;\n        vec3 oy23 = mod(floor(p23 * K), 7.0) * K - Ko;\n        vec3 oz23 = floor(p23 * K2) * Kz - Kzo;\n        vec3 ox31 = fract(p31 * K) - Ko;\n        vec3 oy31 = mod(floor(p31 * K), 7.0) * K - Ko;\n        vec3 oz31 = floor(p31 * K2) * Kz - Kzo;\n        vec3 ox32 = fract(p32 * K) - Ko;\n        vec3 oy32 = mod(floor(p32 * K), 7.0) * K - Ko;\n        vec3 oz32 = floor(p32 * K2) * Kz - Kzo;\n        vec3 ox33 = fract(p33 * K) - Ko;\n        vec3 oy33 = mod(floor(p33 * K), 7.0) * K - Ko;\n        vec3 oz33 = floor(p33 * K2) * Kz - Kzo;\n        vec3 dx11 = Pfx + jitter * ox11;\n        vec3 dy11 = Pfy.x + jitter * oy11;\n        vec3 dz11 = Pfz.x + jitter * oz11;\n        vec3 dx12 = Pfx + jitter * ox12;\n        vec3 dy12 = Pfy.x + jitter * oy12;\n        vec3 dz12 = Pfz.y + jitter * oz12;\n        vec3 dx13 = Pfx + jitter * ox13;\n        vec3 dy13 = Pfy.x + jitter * oy13;\n        vec3 dz13 = Pfz.z + jitter * oz13;\n        vec3 dx21 = Pfx + jitter * ox21;\n        vec3 dy21 = Pfy.y + jitter * oy21;\n        vec3 dz21 = Pfz.x + jitter * oz21;\n        vec3 dx22 = Pfx + jitter * ox22;\n        vec3 dy22 = Pfy.y + jitter * oy22;\n        vec3 dz22 = Pfz.y + jitter * oz22;\n        vec3 dx23 = Pfx + jitter * ox23;\n        vec3 dy23 = Pfy.y + jitter * oy23;\n        vec3 dz23 = Pfz.z + jitter * oz23;\n        vec3 dx31 = Pfx + jitter * ox31;\n        vec3 dy31 = Pfy.z + jitter * oy31;\n        vec3 dz31 = Pfz.x + jitter * oz31;\n        vec3 dx32 = Pfx + jitter * ox32;\n        vec3 dy32 = Pfy.z + jitter * oy32;\n        vec3 dz32 = Pfz.y + jitter * oz32;\n        vec3 dx33 = Pfx + jitter * ox33;\n        vec3 dy33 = Pfy.z + jitter * oy33;\n        vec3 dz33 = Pfz.z + jitter * oz33;\n        vec3 d11 = dist(dx11, dy11, dz11);\n        vec3 d12 = dist(dx12, dy12, dz12);\n        vec3 d13 = dist(dx13, dy13, dz13);\n        vec3 d21 = dist(dx21, dy21, dz21);\n        vec3 d22 = dist(dx22, dy22, dz22);\n        vec3 d23 = dist(dx23, dy23, dz23);\n        vec3 d31 = dist(dx31, dy31, dz31);\n        vec3 d32 = dist(dx32, dy32, dz32);\n        vec3 d33 = dist(dx33, dy33, dz33);\n        vec3 d1a = min(d11, d12);\n        d12 = max(d11, d12);\n        d11 = min(d1a, d13);\n        d13 = max(d1a, d13);\n        d12 = min(d12, d13);\n        vec3 d2a = min(d21, d22);\n        d22 = max(d21, d22);\n        d21 = min(d2a, d23);\n        d23 = max(d2a, d23);\n        d22 = min(d22, d23);\n        vec3 d3a = min(d31, d32);\n        d32 = max(d31, d32);\n        d31 = min(d3a, d33);\n        d33 = max(d3a, d33);\n        d32 = min(d32, d33);\n        vec3 da = min(d11, d21);\n        d21 = max(d11, d21);\n        d11 = min(da, d31);\n        d31 = max(da, d31);\n        d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n        d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx;\n        d12 = min(d12, d21);\n        d12 = min(d12, d22);\n        d12 = min(d12, d31);\n        d12 = min(d12, d32);\n        d11.yz = min(d11.yz, d12.xy);\n        d11.y = min(d11.y, d12.z);\n        d11.y = min(d11.y, d11.z);\n        return sqrt(d11.xy);\n    }\nvec4 Ruby_Mine1553790481262_158_main() \n    {\n        vec4 Ruby_Mine1553790481262_158_gl_FragColor = vec4(0.0);\n        vec2 worl = worley(vPosition, vJitter);\n        float world = worl.y - worl.x;\n        vec3 color = mix(color1, color2, clamp(world * 2.0, 0.0, 1.0));\n        Ruby_Mine1553790481262_158_gl_FragColor = vec4((color * 0.1) + (color * world), 1.0);\n        return Ruby_Mine1553790481262_158_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = Ruby_Mine1553790481262_158_main();    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform float time;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nvarying vec3 vPosition;\nvarying float vJitter;\nvec3 permute(vec3 x) \n    {\n        return mod((34.0 * x + 1.0) * x, 289.0);\n    }\nvec3 dist(vec3 x, vec3 y, vec3 z) \n    {\n        return x * x + y * y + z * z;\n    }\nvec2 worley(vec3 P, float jitter) \n    {\n        float K = 0.142857142857;\n        float Ko = 0.428571428571;\n        float K2 = 0.020408163265306;\n        float Kz = 0.166666666667;\n        float Kzo = 0.416666666667;\n        vec3 Pi = mod(floor(P), 289.0);\n        vec3 Pf = fract(P) - 0.5;\n        vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\n        vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\n        vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\n        vec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));\n        vec3 p1 = permute(p + Pi.y - 1.0);\n        vec3 p2 = permute(p + Pi.y);\n        vec3 p3 = permute(p + Pi.y + 1.0);\n        vec3 p11 = permute(p1 + Pi.z - 1.0);\n        vec3 p12 = permute(p1 + Pi.z);\n        vec3 p13 = permute(p1 + Pi.z + 1.0);\n        vec3 p21 = permute(p2 + Pi.z - 1.0);\n        vec3 p22 = permute(p2 + Pi.z);\n        vec3 p23 = permute(p2 + Pi.z + 1.0);\n        vec3 p31 = permute(p3 + Pi.z - 1.0);\n        vec3 p32 = permute(p3 + Pi.z);\n        vec3 p33 = permute(p3 + Pi.z + 1.0);\n        vec3 ox11 = fract(p11 * K) - Ko;\n        vec3 oy11 = mod(floor(p11 * K), 7.0) * K - Ko;\n        vec3 oz11 = floor(p11 * K2) * Kz - Kzo;\n        vec3 ox12 = fract(p12 * K) - Ko;\n        vec3 oy12 = mod(floor(p12 * K), 7.0) * K - Ko;\n        vec3 oz12 = floor(p12 * K2) * Kz - Kzo;\n        vec3 ox13 = fract(p13 * K) - Ko;\n        vec3 oy13 = mod(floor(p13 * K), 7.0) * K - Ko;\n        vec3 oz13 = floor(p13 * K2) * Kz - Kzo;\n        vec3 ox21 = fract(p21 * K) - Ko;\n        vec3 oy21 = mod(floor(p21 * K), 7.0) * K - Ko;\n        vec3 oz21 = floor(p21 * K2) * Kz - Kzo;\n        vec3 ox22 = fract(p22 * K) - Ko;\n        vec3 oy22 = mod(floor(p22 * K), 7.0) * K - Ko;\n        vec3 oz22 = floor(p22 * K2) * Kz - Kzo;\n        vec3 ox23 = fract(p23 * K) - Ko;\n        vec3 oy23 = mod(floor(p23 * K), 7.0) * K - Ko;\n        vec3 oz23 = floor(p23 * K2) * Kz - Kzo;\n        vec3 ox31 = fract(p31 * K) - Ko;\n        vec3 oy31 = mod(floor(p31 * K), 7.0) * K - Ko;\n        vec3 oz31 = floor(p31 * K2) * Kz - Kzo;\n        vec3 ox32 = fract(p32 * K) - Ko;\n        vec3 oy32 = mod(floor(p32 * K), 7.0) * K - Ko;\n        vec3 oz32 = floor(p32 * K2) * Kz - Kzo;\n        vec3 ox33 = fract(p33 * K) - Ko;\n        vec3 oy33 = mod(floor(p33 * K), 7.0) * K - Ko;\n        vec3 oz33 = floor(p33 * K2) * Kz - Kzo;\n        vec3 dx11 = Pfx + jitter * ox11;\n        vec3 dy11 = Pfy.x + jitter * oy11;\n        vec3 dz11 = Pfz.x + jitter * oz11;\n        vec3 dx12 = Pfx + jitter * ox12;\n        vec3 dy12 = Pfy.x + jitter * oy12;\n        vec3 dz12 = Pfz.y + jitter * oz12;\n        vec3 dx13 = Pfx + jitter * ox13;\n        vec3 dy13 = Pfy.x + jitter * oy13;\n        vec3 dz13 = Pfz.z + jitter * oz13;\n        vec3 dx21 = Pfx + jitter * ox21;\n        vec3 dy21 = Pfy.y + jitter * oy21;\n        vec3 dz21 = Pfz.x + jitter * oz21;\n        vec3 dx22 = Pfx + jitter * ox22;\n        vec3 dy22 = Pfy.y + jitter * oy22;\n        vec3 dz22 = Pfz.y + jitter * oz22;\n        vec3 dx23 = Pfx + jitter * ox23;\n        vec3 dy23 = Pfy.y + jitter * oy23;\n        vec3 dz23 = Pfz.z + jitter * oz23;\n        vec3 dx31 = Pfx + jitter * ox31;\n        vec3 dy31 = Pfy.z + jitter * oy31;\n        vec3 dz31 = Pfz.x + jitter * oz31;\n        vec3 dx32 = Pfx + jitter * ox32;\n        vec3 dy32 = Pfy.z + jitter * oy32;\n        vec3 dz32 = Pfz.y + jitter * oz32;\n        vec3 dx33 = Pfx + jitter * ox33;\n        vec3 dy33 = Pfy.z + jitter * oy33;\n        vec3 dz33 = Pfz.z + jitter * oz33;\n        vec3 d11 = dist(dx11, dy11, dz11);\n        vec3 d12 = dist(dx12, dy12, dz12);\n        vec3 d13 = dist(dx13, dy13, dz13);\n        vec3 d21 = dist(dx21, dy21, dz21);\n        vec3 d22 = dist(dx22, dy22, dz22);\n        vec3 d23 = dist(dx23, dy23, dz23);\n        vec3 d31 = dist(dx31, dy31, dz31);\n        vec3 d32 = dist(dx32, dy32, dz32);\n        vec3 d33 = dist(dx33, dy33, dz33);\n        vec3 d1a = min(d11, d12);\n        d12 = max(d11, d12);\n        d11 = min(d1a, d13);\n        d13 = max(d1a, d13);\n        d12 = min(d12, d13);\n        vec3 d2a = min(d21, d22);\n        d22 = max(d21, d22);\n        d21 = min(d2a, d23);\n        d23 = max(d2a, d23);\n        d22 = min(d22, d23);\n        vec3 d3a = min(d31, d32);\n        d32 = max(d31, d32);\n        d31 = min(d3a, d33);\n        d33 = max(d3a, d33);\n        d32 = min(d32, d33);\n        vec3 da = min(d11, d21);\n        d21 = max(d11, d21);\n        d11 = min(da, d31);\n        d31 = max(da, d31);\n        d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n        d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx;\n        d12 = min(d12, d21);\n        d12 = min(d12, d22);\n        d12 = min(d12, d31);\n        d12 = min(d12, d32);\n        d11.yz = min(d11.yz, d12.xy);\n        d11.y = min(d11.y, d12.z);\n        d11.y = min(d11.y, d11.z);\n        return sqrt(d11.xy);\n    }\nvec4 Ruby_Mine1553790481262_158_main() \n    {\n        vec4 Ruby_Mine1553790481262_158_gl_Position = vec4(0.0);\n        vJitter = 1.0;\n        vPosition = (position * 2.0) + vec3(sin(time), cos(time), cos(time + 3.14));\n        vec2 worl = worley(vPosition, vJitter);\n        vec3 pos = position - (length(worl) * normal * 0.2);\n        Ruby_Mine1553790481262_158_gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n        return Ruby_Mine1553790481262_158_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Ruby_Mine1553790481262_158_main();    }\n",uniforms:{time:{type:"f",glslType:"float"},color1:{value:{r:.95,g:.1,b:.8},type:"c",glslType:"vec3"},color2:{value:{r:.7,g:.07,b:.6},type:"c",glslType:"vec3"}},url:"http://shaderfrog.com/app/view/3301",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},u={id:3345,name:"Thruster Shader",fragment:"#define TAU 6.28318530718\n#define MAX_ITER 5\n#define tau 6.2831853\n\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform vec2 Tiling_Caustic1477531952046_152_resolution;\nuniform vec3 backgroundColor;\nuniform vec3 Tiling_Caustic1477531952046_152_color;\nuniform float Tiling_Caustic1477531952046_152_speed;\nuniform float Tiling_Caustic1477531952046_152_brightness;\nuniform float time;\nuniform float contrast;\nuniform float distortion;\nuniform float Noise_Ripples1477531959288_166_speed;\nuniform vec3 Noise_Ripples1477531959288_166_color;\nuniform float Noise_Ripples1477531959288_166_brightness;\nuniform sampler2D noiseImage;\nuniform vec2 Noise_Ripples1477531959288_166_resolution;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform float highlightIntensity;\nuniform vec3 highlightColor;\nuniform vec3 Wiggly_Improved1477532051339_181_color;\nuniform vec3 Transparent_Glow1477532059126_201_color;\nuniform float Transparent_Glow1477532059126_201_start;\nuniform float Transparent_Glow1477532059126_201_end;\nuniform float Transparent_Glow1477532059126_201_alpha;\nuniform vec3 Glow_Effect1477532183055_216_color;\nuniform float Glow_Effect1477532183055_216_start;\nuniform float Glow_Effect1477532183055_216_end;\nuniform float Glow_Effect1477532183055_216_alpha;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nmat2 makem2(in float theta) \n    {\n        float c = cos(theta);\n        float s = sin(theta);\n        return mat2(c, -s, s, c);\n    }\nfloat noise(in vec2 x) \n    {\n        return texture2D(noiseImage, x * .01).x;\n    }\nfloat fbm(in vec2 p) \n    {\n        float z = 2.;\n        float rz = 0.;\n        vec2 bp = p;\n        for (float i = 1.;\n i < 6.0; i++) \n        {\n            rz += abs((noise(p) - 0.5) * 2.0) / z;\n            z = z * 2.;\n            p = p * 2.;\n        }\n        return rz;\n    }\nfloat dualfbm(in vec2 p) \n    {\n        vec2 p2 = p * distortion;\n        vec2 basis = vec2(fbm(p2 - time * Noise_Ripples1477531959288_166_speed * 1.6), fbm(p2 + time * Noise_Ripples1477531959288_166_speed * 1.7));\n        basis = (basis - .5) * .2;\n        p += basis;\n        return fbm(p * makem2(time * Noise_Ripples1477531959288_166_speed * 0.2));\n    }\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_FragColor = vec4(0.0);\n        vec2 uv = Tiling_Caustic1477531952046_152_vUv * Tiling_Caustic1477531952046_152_resolution;\n        vec2 p = mod(uv * TAU, TAU) - 250.0;\n        vec2 i = vec2(p);\n        float c = 1.0;\n        float inten = 0.005;\n        for (int n = 0;\n n < MAX_ITER; n++) \n        {\n            float t = time * Tiling_Caustic1477531952046_152_speed * (1.0 - (3.5 / float(n + 1)));\n            i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n            c += 1.0 / length(vec2(p.x / (sin(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n        }\n        c /= float(MAX_ITER);\n        c = 1.17 - pow(c, Tiling_Caustic1477531952046_152_brightness);\n        vec3 rgb = vec3(pow(abs(c), 8.0));\n        Tiling_Caustic1477531952046_152_gl_FragColor = vec4(rgb * Tiling_Caustic1477531952046_152_color + backgroundColor, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_FragColor *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_FragColor = vec4(0.0);\n        vec2 p = (Noise_Ripples1477531959288_166_vUv.xy - 0.5) * Noise_Ripples1477531959288_166_resolution;\n        float rz = dualfbm(p);\n        vec3 col = (Noise_Ripples1477531959288_166_color / rz) * Noise_Ripples1477531959288_166_brightness;\n        col = ((col - 0.5) * max(contrast, 0.0)) + 0.5;\n        Noise_Ripples1477531959288_166_gl_FragColor = vec4(col, 1.0);\n        return Noise_Ripples1477531959288_166_gl_FragColor *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_FragColor = vec4(0.0);\n        Wiggly_Improved1477532051339_181_gl_FragColor = vec4(clamp(highlightColor * highlightIntensity * light, 0.0, 1.0), 1.0);\n        return Wiggly_Improved1477532051339_181_gl_FragColor *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Transparent_Glow1477532059126_201_fNormal);\n        vec3 eye = normalize(-Transparent_Glow1477532059126_201_fPosition.xyz);\n        float rim = smoothstep(Transparent_Glow1477532059126_201_start, Transparent_Glow1477532059126_201_end, 1.0 - dot(normal, eye));\n        float value = clamp(rim * Transparent_Glow1477532059126_201_alpha, 0.0, 1.0);\n        Transparent_Glow1477532059126_201_gl_FragColor = vec4(Transparent_Glow1477532059126_201_color * value, value);\n        return Transparent_Glow1477532059126_201_gl_FragColor *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Glow_Effect1477532183055_216_fNormal);\n        vec3 eye = normalize(-Glow_Effect1477532183055_216_fPosition.xyz);\n        float rim = smoothstep(Glow_Effect1477532183055_216_start, Glow_Effect1477532183055_216_end, 1.0 - dot(normal, eye));\n        Glow_Effect1477532183055_216_gl_FragColor = vec4(clamp(rim, 0.0, 1.0) * Glow_Effect1477532183055_216_alpha * Glow_Effect1477532183055_216_color, 1.0);\n        return Glow_Effect1477532183055_216_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = (Tiling_Caustic1477531952046_152_main() + Noise_Ripples1477531959288_166_main() + Wiggly_Improved1477532051339_181_main() + Transparent_Glow1477532059126_201_main() + Glow_Effect1477532183055_216_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform float Wiggly_Improved1477532051339_181_speed;\nuniform float frequency;\nuniform float amplitude;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 Tiling_Caustic1477531952046_152_vPosition;\nvarying vec3 Tiling_Caustic1477531952046_152_vNormal;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv2;\nvarying vec3 Noise_Ripples1477531959288_166_vPosition;\nvarying vec3 Noise_Ripples1477531959288_166_vNormal;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv2;\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Wiggly_Improved1477532051339_181_vPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_Position = vec4(0.0);\n        Tiling_Caustic1477531952046_152_vNormal = normal;\n        Tiling_Caustic1477531952046_152_vUv = uv;\n        Tiling_Caustic1477531952046_152_vUv2 = uv2;\n        Tiling_Caustic1477531952046_152_vPosition = position;\n        Tiling_Caustic1477531952046_152_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_Position *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_Position = vec4(0.0);\n        Noise_Ripples1477531959288_166_vNormal = normal;\n        Noise_Ripples1477531959288_166_vUv = uv;\n        Noise_Ripples1477531959288_166_vUv2 = uv2;\n        Noise_Ripples1477531959288_166_vPosition = position;\n        Noise_Ripples1477531959288_166_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Noise_Ripples1477531959288_166_gl_Position *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_Position = vec4(0.0);\n        vec3 offset = normalize(vec3(0.0) - position) * (amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + position.y * frequency));\n        vec3 newPosition = position + vec3(offset.x, 0.0, offset.z);\n        light = amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + 1.0 + position.y * frequency);\n        Wiggly_Improved1477532051339_181_vPosition = newPosition;\n        Wiggly_Improved1477532051339_181_gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n        return Wiggly_Improved1477532051339_181_gl_Position *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_Position = vec4(0.0);\n        Transparent_Glow1477532059126_201_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Transparent_Glow1477532059126_201_fPosition = pos.xyz;\n        Transparent_Glow1477532059126_201_gl_Position = projectionMatrix * pos;\n        return Transparent_Glow1477532059126_201_gl_Position *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_Position = vec4(0.0);\n        Glow_Effect1477532183055_216_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Glow_Effect1477532183055_216_fPosition = pos.xyz;\n        Glow_Effect1477532183055_216_gl_Position = projectionMatrix * pos;\n        return Glow_Effect1477532183055_216_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Tiling_Caustic1477531952046_152_main() + Noise_Ripples1477531959288_166_main() + Wiggly_Improved1477532051339_181_main() + Transparent_Glow1477532059126_201_main() + Glow_Effect1477532183055_216_main();    }\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},backgroundColor:{value:{r:"0",g:"0",b:"0"},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_resolution:{value:{x:1,y:1},type:"v2",glslType:"vec2"},Tiling_Caustic1477531952046_152_color:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_speed:{value:"0.5",type:"f",glslType:"float"},Tiling_Caustic1477531952046_152_brightness:{value:"1.5",type:"f",glslType:"float"},noiseImage:{value:null,type:"t",glslType:"sampler2D"},distortion:{value:"2",type:"f",glslType:"float"},contrast:{value:"1.5",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_speed:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_color:{value:{r:1,g:.2823529411764706,b:.4823529411764706},type:"c",glslType:"vec3"},Noise_Ripples1477531959288_166_brightness:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_resolution:{value:{x:"2",y:"2"},type:"v2",glslType:"vec2"},amplitude:{value:"1",type:"f",glslType:"float"},frequency:{value:"20",type:"f",glslType:"float"},highlightIntensity:{value:"0.4",type:"f",glslType:"float"},highlightColor:{value:{r:1,g:.5450980392156862,b:.23529411764705882},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_color:{value:{r:0,g:0,b:0},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_speed:{value:"12",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_color:{value:{r:1,g:.5294117647058824,b:.8156862745098039},type:"c",glslType:"vec3"},Transparent_Glow1477532059126_201_start:{value:"0.54674743",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_end:{value:"0.44399246",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_alpha:{value:"0.5",type:"f",glslType:"float"},Glow_Effect1477532183055_216_color:{value:{r:"1",g:"1",b:"1"},type:"c",glslType:"vec3"},Glow_Effect1477532183055_216_start:{value:"0",type:"f",glslType:"float"},Glow_Effect1477532183055_216_end:{value:"1.9",type:"f",glslType:"float"},Glow_Effect1477532183055_216_alpha:{value:"1",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/3345",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},m={id:3369,name:"Flowing Circles",fragment:"precision highp float;\nprecision highp int;\nuniform vec2 resolution;\nuniform float time;\nuniform float speed;\nuniform float baseRadius;\nuniform float colorVariation;\nuniform float brightnessVariation;\nuniform vec3 backgroundColor;\nuniform float variation;\nvarying vec2 vUv;\nvec3 n(vec2 x, float t) \n    {\n        vec3 v = floor(vec3(x, t));\n        vec3 u = vec3(mod(v.xy, variation), v.z);\n        vec3 c = fract(u.xyz * (vec3(0.16462, 0.84787, 0.98273) + u.xyz * vec3(0.24808, 0.75905, 0.13898) + u.yzx * vec3(0.31517, 0.62703, 0.26063) + u.zxy * vec3(0.47127, 0.58568, 0.37244)) + u.yzx * (vec3(0.35425, 0.65187, 0.12423) + u.yzx * vec3(0.95238, 0.93187, 0.95213) + u.zxy * vec3(0.31526, 0.62512, 0.71837)) + u.zxy * (vec3(0.95213, 0.13841, 0.16479) + u.zxy * vec3(0.47626, 0.69257, 0.19738)));\n        return v + c;\n    }\nvec3 col(vec2 x, float t) \n    {\n        return vec3(0.5 + max(brightnessVariation * cos(x.y * x.x), 0.0)) + clamp(colorVariation * cos(fract(vec3(x, t)) * 371.0241), vec3(-0.4), vec3(1.0));\n    }\nvec2 idx(vec2 x) \n    {\n        return floor(fract(x * 29.0) * 3.0) - vec2(1.0);\n    }\nfloat circle(vec2 x, vec2 c, float r) \n    {\n        return max(0.0, 1.0 - dot(x - c, x - c) / (r * r));\n    }\nvec4 Fluid_Circles1551693972791_443_main() \n    {\n        vec4 Fluid_Circles1551693972791_443_gl_FragColor = vec4(0.0);\n        vec2 x = vUv * resolution;\n        float t = time * speed;\n        vec4 c = vec4(vec3(0.0), 0.1);\n        for (int N = 0;\n N < 3; N++) \n        {\n            for (int k = -1;\n k <= 0; k++) \n            {\n                for (int i = -1;\n i <= 1; i++) \n                {\n                    for (int j = -1;\n j <= 1; j++) \n                    {\n                        vec2 X = x + vec2(j, i);\n                        float t = t + float(N) * 38.0;\n                        float T = t + float(k);\n                        vec3 a = n(X, T);\n                        vec2 o = idx(a.xy);\n                        vec3 b = n(X + o, T + 1.0);\n                        vec2 m = mix(a.xy, b.xy, (t - a.z) / (b.z - a.z));\n                        float r = baseRadius * sin(3.1415927 * clamp((t - a.z) / (b.z - a.z), 0.0, 1.0));\n                        if (length(a.xy - b.xy) / (b.z - a.z) > 2.0) \n                        {\n                            r = 0.0;\n                        }\n                         c += vec4(col(a.xy, a.z), 1.0) * circle(x, m, r);\n                    }\n                }\n            }\n        }\n        Fluid_Circles1551693972791_443_gl_FragColor = vec4(c.rgb / max(1e-5, c.w) + backgroundColor, 1.0);\n        return Fluid_Circles1551693972791_443_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = Fluid_Circles1551693972791_443_main();    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nvec4 Fluid_Circles1551693972791_443_main() \n    {\n        vec4 Fluid_Circles1551693972791_443_gl_Position = vec4(0.0);\n        vNormal = normal;\n        vUv = uv;\n        vUv2 = uv2;\n        vPosition = position;\n        Fluid_Circles1551693972791_443_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Fluid_Circles1551693972791_443_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Fluid_Circles1551693972791_443_main();    }\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},resolution:{value:{x:"8",y:"9"},type:"v2",glslType:"vec2"},speed:{value:".2",type:"f",glslType:"float"},baseRadius:{value:".2",type:"f",glslType:"float"},backgroundColor:{value:{r:0,g:".",b:"0.9"},type:"c",glslType:"vec3"},brightnessVariation:{value:"0",type:"f",glslType:"float"},colorVariation:{value:"0.99",type:"f",glslType:"float"},variation:{value:"50",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/3369",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},p={id:3373,name:"Electric Shader",fragment:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform float opacity;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nfloat Hash(vec2 p) \n    {\n        vec3 p2 = vec3(p.xy, 1.0);\n        return fract(sin(dot(p2, vec3(37.1, 61.7, 12.4))) * 3758.5453123);\n    }\nfloat noise(in vec2 p) \n    {\n        vec2 i = floor(p);\n        vec2 f = fract(p);\n        f *= f * (3.0 - 2.0 * f);\n        return mix(mix(Hash(i + vec2(0., 0.)), Hash(i + vec2(1., 0.)), f.x), mix(Hash(i + vec2(0., 1.)), Hash(i + vec2(1., 1.)), f.x), f.y);\n    }\nfloat fbm(vec2 p) \n    {\n        float v = 0.0;\n        v += noise(p * 1.0) * .5;\n        v += noise(p * 2.) * .25;\n        v += noise(p * 4.) * .125;\n        return v * 1.0;\n    }\nconst float PI = acos(0.0) * 2.0;\nvec2 RadialCoords(vec3 a_coords) \n    {\n        vec3 a_coords_n = normalize(a_coords);\n        float lon = atan(a_coords_n.z, a_coords_n.x);\n        float lat = acos(a_coords_n.y);\n        vec2 sphereCoords = vec2(lon, lat) / PI;\n        return vec2(fract(sphereCoords.x * 0.5 + 0.5), 1.0 - sphereCoords.y);\n    }\nvec4 Lightning_main() \n    {\n        vec4 Lightning_gl_FragColor = vec4(0.0);\n        vec2 uv = RadialCoords(vPosition * 1.0) * 2.0 - 1.0;\n        vec3 finalColor = vec3(0.0);\n        const float strength = 0.01;\n        const float dx = 0.1;\n        float t = 0.0;\n        for (int k = -4;\n k < 14; ++k) \n        {\n            vec2 thisUV = uv;\n            thisUV.x -= dx * float(k);\n            thisUV.y -= float(k);\n            t += abs(strength / (thisUV.x + fbm(thisUV + time)));\n        }\n        finalColor += t * vec3(0.1, 0.3, 1.0);\n        Lightning_gl_FragColor = vec4(finalColor, opacity);\n        return Lightning_gl_FragColor;\n    }\nvec4 Electric_Shader1556488915096_215_main() \n    {\n        vec4 Electric_Shader1556488915096_215_gl_FragColor = vec4(0.0);\n        Electric_Shader1556488915096_215_gl_FragColor = Lightning_main();\n        return Electric_Shader1556488915096_215_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = Electric_Shader1556488915096_215_main();\n if (gl_FragColor.a < 0.5  && gl_FragColor.g <0.5) discard;   }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nvec4 Lightning_main() \n    {\n        vec4 Lightning_gl_Position = vec4(0.0);\n        vNormal = normal;\n        vUv = uv;\n        vUv2 = uv2;\n        vPosition = position;\n        Lightning_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Lightning_gl_Position *= 0.5;\n    }\nvec4 Electric_Shader1556488915096_215_main() \n    {\n        vec4 Electric_Shader1556488915096_215_gl_Position = vec4(0.0);\n        Electric_Shader1556488915096_215_gl_Position = Lightning_main();\n        return Electric_Shader1556488915096_215_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Electric_Shader1556488915096_215_main();    }\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},opacity:{value:"0.4",type:"f",glslType:"float"}},side:2,url:"http://shaderfrog.com/app/view/3373",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/sirfizx"}},g={id:3386,name:"CS1 Shader",fragment:"#define DOWN_SCALE 1.0\n#define MAX_INT_DIGITS 4\n#define NORMAL 0\n#define INVERT 1\n#define UNDERLINE 2\n\nprecision highp float;\nprecision highp int;\nuniform float time;\nuniform vec2 resolution;\nuniform vec3 color;\nuniform vec3 background_color;\nvarying vec2 vUv;\nint TEXT_MODE = NORMAL;\nvec4 ch_spc = vec4(0x000000, 0x000000, 0x000000, 0x000000);\nvec4 ch_exc = vec4(0x003078, 0x787830, 0x300030, 0x300000);\nvec4 ch_quo = vec4(0x006666, 0x662400, 0x000000, 0x000000);\nvec4 ch_hsh = vec4(0x006C6C, 0xFE6C6C, 0x6CFE6C, 0x6C0000);\nvec4 ch_dol = vec4(0x30307C, 0xC0C078, 0x0C0CF8, 0x303000);\nvec4 ch_pct = vec4(0x000000, 0xC4CC18, 0x3060CC, 0x8C0000);\nvec4 ch_amp = vec4(0x0070D8, 0xD870FA, 0xDECCDC, 0x760000);\nvec4 ch_apo = vec4(0x003030, 0x306000, 0x000000, 0x000000);\nvec4 ch_lbr = vec4(0x000C18, 0x306060, 0x603018, 0x0C0000);\nvec4 ch_rbr = vec4(0x006030, 0x180C0C, 0x0C1830, 0x600000);\nvec4 ch_ast = vec4(0x000000, 0x663CFF, 0x3C6600, 0x000000);\nvec4 ch_crs = vec4(0x000000, 0x18187E, 0x181800, 0x000000);\nvec4 ch_com = vec4(0x000000, 0x000000, 0x000038, 0x386000);\nvec4 ch_dsh = vec4(0x000000, 0x0000FE, 0x000000, 0x000000);\nvec4 ch_per = vec4(0x000000, 0x000000, 0x000038, 0x380000);\nvec4 ch_lsl = vec4(0x000002, 0x060C18, 0x3060C0, 0x800000);\nvec4 ch_0 = vec4(0x007CC6, 0xD6D6D6, 0xD6D6C6, 0x7C0000);\nvec4 ch_1 = vec4(0x001030, 0xF03030, 0x303030, 0xFC0000);\nvec4 ch_2 = vec4(0x0078CC, 0xCC0C18, 0x3060CC, 0xFC0000);\nvec4 ch_3 = vec4(0x0078CC, 0x0C0C38, 0x0C0CCC, 0x780000);\nvec4 ch_4 = vec4(0x000C1C, 0x3C6CCC, 0xFE0C0C, 0x1E0000);\nvec4 ch_5 = vec4(0x00FCC0, 0xC0C0F8, 0x0C0CCC, 0x780000);\nvec4 ch_6 = vec4(0x003860, 0xC0C0F8, 0xCCCCCC, 0x780000);\nvec4 ch_7 = vec4(0x00FEC6, 0xC6060C, 0x183030, 0x300000);\nvec4 ch_8 = vec4(0x0078CC, 0xCCEC78, 0xDCCCCC, 0x780000);\nvec4 ch_9 = vec4(0x0078CC, 0xCCCC7C, 0x181830, 0x700000);\nvec4 ch_col = vec4(0x000000, 0x383800, 0x003838, 0x000000);\nvec4 ch_scl = vec4(0x000000, 0x383800, 0x003838, 0x183000);\nvec4 ch_les = vec4(0x000C18, 0x3060C0, 0x603018, 0x0C0000);\nvec4 ch_equ = vec4(0x000000, 0x007E00, 0x7E0000, 0x000000);\nvec4 ch_grt = vec4(0x006030, 0x180C06, 0x0C1830, 0x600000);\nvec4 ch_que = vec4(0x0078CC, 0x0C1830, 0x300030, 0x300000);\nvec4 ch_ats = vec4(0x007CC6, 0xC6DEDE, 0xDEC0C0, 0x7C0000);\nvec4 ch_A = vec4(0x003078, 0xCCCCCC, 0xFCCCCC, 0xCC0000);\nvec4 ch_B = vec4(0x00FC66, 0x66667C, 0x666666, 0xFC0000);\nvec4 ch_C = vec4(0x003C66, 0xC6C0C0, 0xC0C666, 0x3C0000);\nvec4 ch_D = vec4(0x00F86C, 0x666666, 0x66666C, 0xF80000);\nvec4 ch_E = vec4(0x00FE62, 0x60647C, 0x646062, 0xFE0000);\nvec4 ch_F = vec4(0x00FE66, 0x62647C, 0x646060, 0xF00000);\nvec4 ch_G = vec4(0x003C66, 0xC6C0C0, 0xCEC666, 0x3E0000);\nvec4 ch_H = vec4(0x00CCCC, 0xCCCCFC, 0xCCCCCC, 0xCC0000);\nvec4 ch_I = vec4(0x007830, 0x303030, 0x303030, 0x780000);\nvec4 ch_J = vec4(0x001E0C, 0x0C0C0C, 0xCCCCCC, 0x780000);\nvec4 ch_K = vec4(0x00E666, 0x6C6C78, 0x6C6C66, 0xE60000);\nvec4 ch_L = vec4(0x00F060, 0x606060, 0x626666, 0xFE0000);\nvec4 ch_M = vec4(0x00C6EE, 0xFEFED6, 0xC6C6C6, 0xC60000);\nvec4 ch_N = vec4(0x00C6C6, 0xE6F6FE, 0xDECEC6, 0xC60000);\nvec4 ch_O = vec4(0x00386C, 0xC6C6C6, 0xC6C66C, 0x380000);\nvec4 ch_P = vec4(0x00FC66, 0x66667C, 0x606060, 0xF00000);\nvec4 ch_Q = vec4(0x00386C, 0xC6C6C6, 0xCEDE7C, 0x0C1E00);\nvec4 ch_R = vec4(0x00FC66, 0x66667C, 0x6C6666, 0xE60000);\nvec4 ch_S = vec4(0x0078CC, 0xCCC070, 0x18CCCC, 0x780000);\nvec4 ch_T = vec4(0x00FCB4, 0x303030, 0x303030, 0x780000);\nvec4 ch_U = vec4(0x00CCCC, 0xCCCCCC, 0xCCCCCC, 0x780000);\nvec4 ch_V = vec4(0x00CCCC, 0xCCCCCC, 0xCCCC78, 0x300000);\nvec4 ch_W = vec4(0x00C6C6, 0xC6C6D6, 0xD66C6C, 0x6C0000);\nvec4 ch_X = vec4(0x00CCCC, 0xCC7830, 0x78CCCC, 0xCC0000);\nvec4 ch_Y = vec4(0x00CCCC, 0xCCCC78, 0x303030, 0x780000);\nvec4 ch_Z = vec4(0x00FECE, 0x981830, 0x6062C6, 0xFE0000);\nvec4 ch_lsb = vec4(0x003C30, 0x303030, 0x303030, 0x3C0000);\nvec4 ch_rsl = vec4(0x000080, 0xC06030, 0x180C06, 0x020000);\nvec4 ch_rsb = vec4(0x003C0C, 0x0C0C0C, 0x0C0C0C, 0x3C0000);\nvec4 ch_pow = vec4(0x10386C, 0xC60000, 0x000000, 0x000000);\nvec4 ch_usc = vec4(0x000000, 0x000000, 0x000000, 0x00FF00);\nvec4 ch_a = vec4(0x000000, 0x00780C, 0x7CCCCC, 0x760000);\nvec4 ch_b = vec4(0x00E060, 0x607C66, 0x666666, 0xDC0000);\nvec4 ch_c = vec4(0x000000, 0x0078CC, 0xC0C0CC, 0x780000);\nvec4 ch_d = vec4(0x001C0C, 0x0C7CCC, 0xCCCCCC, 0x760000);\nvec4 ch_e = vec4(0x000000, 0x0078CC, 0xFCC0CC, 0x780000);\nvec4 ch_f = vec4(0x00386C, 0x6060F8, 0x606060, 0xF00000);\nvec4 ch_g = vec4(0x000000, 0x0076CC, 0xCCCC7C, 0x0CCC78);\nvec4 ch_h = vec4(0x00E060, 0x606C76, 0x666666, 0xE60000);\nvec4 ch_i = vec4(0x001818, 0x007818, 0x181818, 0x7E0000);\nvec4 ch_j = vec4(0x000C0C, 0x003C0C, 0x0C0C0C, 0xCCCC78);\nvec4 ch_k = vec4(0x00E060, 0x60666C, 0x786C66, 0xE60000);\nvec4 ch_l = vec4(0x007818, 0x181818, 0x181818, 0x7E0000);\nvec4 ch_m = vec4(0x000000, 0x00FCD6, 0xD6D6D6, 0xC60000);\nvec4 ch_n = vec4(0x000000, 0x00F8CC, 0xCCCCCC, 0xCC0000);\nvec4 ch_o = vec4(0x000000, 0x0078CC, 0xCCCCCC, 0x780000);\nvec4 ch_p = vec4(0x000000, 0x00DC66, 0x666666, 0x7C60F0);\nvec4 ch_q = vec4(0x000000, 0x0076CC, 0xCCCCCC, 0x7C0C1E);\nvec4 ch_r = vec4(0x000000, 0x00EC6E, 0x766060, 0xF00000);\nvec4 ch_s = vec4(0x000000, 0x0078CC, 0x6018CC, 0x780000);\nvec4 ch_t = vec4(0x000020, 0x60FC60, 0x60606C, 0x380000);\nvec4 ch_u = vec4(0x000000, 0x00CCCC, 0xCCCCCC, 0x760000);\nvec4 ch_v = vec4(0x000000, 0x00CCCC, 0xCCCC78, 0x300000);\nvec4 ch_w = vec4(0x000000, 0x00C6C6, 0xD6D66C, 0x6C0000);\nvec4 ch_x = vec4(0x000000, 0x00C66C, 0x38386C, 0xC60000);\nvec4 ch_y = vec4(0x000000, 0x006666, 0x66663C, 0x0C18F0);\nvec4 ch_z = vec4(0x000000, 0x00FC8C, 0x1860C4, 0xFC0000);\nvec4 ch_lpa = vec4(0x001C30, 0x3060C0, 0x603030, 0x1C0000);\nvec4 ch_bar = vec4(0x001818, 0x181800, 0x181818, 0x180000);\nvec4 ch_rpa = vec4(0x00E030, 0x30180C, 0x183030, 0xE00000);\nvec4 ch_tid = vec4(0x0073DA, 0xCE0000, 0x000000, 0x000000);\nvec4 ch_lar = vec4(0x000000, 0x10386C, 0xC6C6FE, 0x000000);\nvec2 res = vec2(1.0) / 1.0;\nvec2 print_pos = vec2(0.0);\nfloat extract_bit(float n, float b) \n    {\n        b = clamp(b, -1.0, 24.0);\n        return floor(mod(floor(n / pow(2.0, floor(b))), 2.0));\n    }\nfloat sprite(vec4 spr, vec2 size, vec2 uv) \n    {\n        uv = floor(uv);\n        float bit = (size.x - uv.x - 1.0) + uv.y * size.x;\n        bool bounds = all(greaterThanEqual(uv, vec2(0))) && all(lessThan(uv, size));\n        float pixels = 0.0;\n        pixels += extract_bit(spr.x, bit - 72.0);\n        pixels += extract_bit(spr.y, bit - 48.0);\n        pixels += extract_bit(spr.z, bit - 24.0);\n        pixels += extract_bit(spr.w, bit - 00.0);\n        return bounds ? pixels : 0.0;\n    }\nfloat char(vec4 ch, vec2 uv) \n    {\n        if (TEXT_MODE == INVERT) \n        {\n            ch = pow(2.0, 24.0) - 1.0 - ch;\n        }\n         if (TEXT_MODE == UNDERLINE) \n        {\n            ch.w = floor(ch.w / 256.0) * 256.0 + 255.0;\n        }\n         float px = sprite(ch, vec2(8, 12), uv - print_pos);\n        print_pos.x += 8.;\n        return px;\n    }\nvec4 get_digit(float d) \n    {\n        d = floor(d);\n        if (d == 0.0) return ch_0;\n         if (d == 1.0) return ch_1;\n         if (d == 2.0) return ch_2;\n         if (d == 3.0) return ch_3;\n         if (d == 4.0) return ch_4;\n         if (d == 5.0) return ch_5;\n         if (d == 6.0) return ch_6;\n         if (d == 7.0) return ch_7;\n         if (d == 8.0) return ch_8;\n         if (d == 9.0) return ch_9;\n         return vec4(0.0);\n    }\nfloat print_number(float number, vec2 uv) \n    {\n        float result = 0.0;\n        for (int i = 3;\n i >= -1; i--) \n        {\n            float digit = mod(number / pow(10.0, float(i)), 10.0);\n            if (i == -1) \n            {\n                result += char(ch_per, uv);\n            }\n             if (abs(number) > pow(10.0, float(i)) || i == 0) \n            {\n                result += char(get_digit(digit), uv);\n            }\n         }\n        return result;\n    }\nfloat print_integer(float number, int zeros, vec2 uv) \n    {\n        float result = 0.0;\n        for (int i = MAX_INT_DIGITS;\n i >= 0; i--) \n        {\n            float digit = mod(number / pow(10.0, float(i)), 10.0);\n            if (abs(number) > pow(10.0, float(i)) || zeros > i || i == 0) \n            {\n                result += char(get_digit(digit), uv);\n            }\n         }\n        return result;\n    }\nfloat text(vec2 uv) \n    {\n        float col = 0.0;\n        vec2 center = res / 2.0;\n        print_pos = floor(center - vec2((17.0 * 8.), (1.0 * 12.)) / 2.0);\n        col += char(ch_C, uv);\n        col += char(ch_S, uv);\n        col += char(ch_1, uv);\n        TEXT_MODE = INVERT;\n        col += char(ch_G, uv);\n        col += char(ch_a, uv);\n        col += char(ch_m, uv);\n        col += char(ch_e, uv);\n        TEXT_MODE = NORMAL;\n        col += char(ch_E, uv);\n        col += char(ch_n, uv);\n        col += char(ch_g, uv);\n        col += char(ch_i, uv);\n        col += char(ch_n, uv);\n        col += char(ch_e, uv);\n        col += char(ch_exc, uv);\n        return col;\n    }\nvec4 Text_main() \n    {\n        vec4 Text_gl_FragColor = vec4(0.0);\n        vec2 uv = (vUv.xy - 0.5) * resolution;\n        vec2 duv = floor(uv.xy / 1.0);\n        float pixel = text(duv);\n        if (pixel > 0.0) \n        {\n            Text_gl_FragColor = vec4(vec3(pixel) * color, 1.0);\n            return Text_gl_FragColor *= 1.0;\n        }\n else \n        {\n            discard;\n        }\n    }\nvec4 Text_Only_Shader1556670324252_90_main() \n    {\n        vec4 Text_Only_Shader1556670324252_90_gl_FragColor = vec4(0.0);\n        Text_Only_Shader1556670324252_90_gl_FragColor = Text_main();\n        return Text_Only_Shader1556670324252_90_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = Text_Only_Shader1556670324252_90_main();    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec2 vUv;\nvec4 Hello_ShaderFrog1551692717683_383_main() \n    {\n        vec4 Hello_ShaderFrog1551692717683_383_gl_Position = vec4(0.0);\n        vUv = uv;\n        Hello_ShaderFrog1551692717683_383_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Hello_ShaderFrog1551692717683_383_gl_Position *= 1.0;\n    }\nvec4 Text_Only_Shader1556670324252_90_main() \n    {\n        vec4 Text_Only_Shader1556670324252_90_gl_Position = vec4(0.0);\n        Text_Only_Shader1556670324252_90_gl_Position = Hello_ShaderFrog1551692717683_383_main();\n        return Text_Only_Shader1556670324252_90_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Text_Only_Shader1556670324252_90_main();    }\n",uniforms:{time:{type:"f",glslType:"float"},color:{value:{r:.7176470588235294,g:0,b:0},type:"c",glslType:"vec3"},resolution:{value:{x:"200",y:"80"},type:"v2",glslType:"vec2"},background_color:{value:{r:0,g:.8156862745098039,b:1},type:"c",glslType:"vec3"}},side:2,url:"http://shaderfrog.com/app/view/3386",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},f={};f.Polkadot_Shader=n,f.Sun_Shader=o,f.Jelly_Shader=i,f.Green_Dance_Shader=a,f.Cosmic_Shader=r,f.Cool_Tiles_Shader=l,f.Disco_Shader=s,f.Marching_Ants_Shader=c,f.Goo_Shader=v,f.Psycho_Shader=_,f.Ova_Shader=d,f.Thruster_Shader=u,f.Flowing_Circles_Shader=m,f.Electric_Shader=p,f.CS1_Shader=g;const h={labelText:"Label Text",suffix:"",labelColor:"#e23fcf",gradientColor1:"#78F8EC",gradientColor2:"#6E4AE2",max:100},y=function(e){this.opts=Object.assign({},h,e),this.size=2e3/9,this.strokeWidth=this.size/8,this.radius=this.size/2-this.strokeWidth/2,this.value=0,this.cachedValue=this.value,this.targetValue=!1,this.isAnimating=!1,this.direction="up",this.svg,this.defs,this.slice,this.overlay,this.text,this.label,this.arrow,this.create(this.opts.labelColor,this.opts.gradientColor1,this.opts.gradientColor2)};y.prototype.create=function(e,t,n){this.createSvg(),this.createDefs(t,n),this.createSlice(),this.createOverlay(),this.createText(n),this.createLabel(e),this.opts.container.appendChild(this.svg)},y.prototype.createSvg=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");e.setAttribute("width",this.size+"px"),e.setAttribute("height",this.size+"px"),this.svg=e},y.prototype.createDefs=function(e,t){var n=document.createElementNS("http://www.w3.org/2000/svg","defs"),o=document.createElementNS("http://www.w3.org/2000/svg","linearGradient");o.setAttribute("id","gradient"+this.opts.labelText),(i=document.createElementNS("http://www.w3.org/2000/svg","stop")).setAttribute("stop-color",t),i.setAttribute("offset","0%"),o.appendChild(i),(a=document.createElementNS("http://www.w3.org/2000/svg","stop")).setAttribute("stop-color",e),a.setAttribute("offset","100%"),o.appendChild(a);var i,a,r=document.createElementNS("http://www.w3.org/2000/svg","linearGradient");r.setAttribute("id","gradient-background"),(i=document.createElementNS("http://www.w3.org/2000/svg","stop")).setAttribute("stop-color","rgba(0, 0, 0, 0.2)"),i.setAttribute("offset","0%"),r.appendChild(i),(a=document.createElementNS("http://www.w3.org/2000/svg","stop")).setAttribute("stop-color","rgba(0, 0, 0, 0.05)"),a.setAttribute("offset","100%"),r.appendChild(a),n.appendChild(o),n.appendChild(r),this.svg.appendChild(n),this.defs=n},y.prototype.createSlice=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","path");e.setAttribute("fill","none"),e.setAttribute("stroke",`url(#gradient${this.opts.labelText})`),e.setAttribute("stroke-width",this.strokeWidth),e.setAttribute("transform","translate("+this.strokeWidth/2+","+this.strokeWidth/2+")"),e.setAttribute("class","animate-draw"),this.svg.appendChild(e),this.slice=e},y.prototype.createOverlay=function(){var e=this.size-this.size/2-this.strokeWidth/2,t=document.createElementNS("http://www.w3.org/2000/svg","circle");t.setAttribute("cx",this.size/2),t.setAttribute("cy",this.size/2),t.setAttribute("r",e),navigator.vendor.includes("Apple")?t.setAttribute("fill","rgba(0, 0, 0, 0.05)"):t.setAttribute("fill","url(#gradient-background)"),this.svg.appendChild(t),this.overlay=t},y.prototype.createText=function(e){var t=this.size/3.5,n=document.createElementNS("http://www.w3.org/2000/svg","text");n.setAttribute("x",this.size/2+t/7.5),n.setAttribute("y",this.size/2+t/4),n.setAttribute("font-size",t),n.setAttribute("fill",e),n.setAttribute("text-anchor","middle");var o=t/3;n.innerHTML=0+`<tspan font-size=${o} dy=${1.2*-o}>${this.opts.suffix}</tspan>`,this.svg.appendChild(n),this.text=n},y.prototype.createLabel=function(e){let t=4.5;this.opts.labelText.length>8&&(t=7);var n=this.size/t,o=document.createElementNS("http://www.w3.org/2000/svg","text");o.setAttribute("x",this.size/2),o.setAttribute("y",2*this.size/3+n/(t-1)),o.setAttribute("font-family","Century Gothic, Lato"),o.setAttribute("font-size",n),o.setAttribute("fill",e),o.setAttribute("text-anchor","middle"),o.innerHTML=this.opts.labelText,this.svg.appendChild(o),this.label=o},y.prototype.createArrow=function(){var e,t,n=this.size/10;"up"===this.direction?(e=n/2,t=-1):"down"===this.direction&&(e=0,t=1);var o=this.size/2-n/2,i=this.size-this.size/3+e,a=t*(n/1.5),r=document.createElementNS("http://www.w3.org/2000/svg","path");r.setAttribute("d","M 0 0 "+n+" 0 "+n/2+" "+a+" 0 0 Z"),r.setAttribute("fill","#97F8F0"),r.setAttribute("opacity","0.6"),r.setAttribute("transform","translate("+o+","+i+")"),this.svg.appendChild(r),this.arrow=r},y.prototype.animateStart=function(){var e=0,t=this,n=setInterval((function(){var o=+(e/t.value).toFixed(2);(e+=o<.95?2-2*o:.05)>=+t.value&&(e=t.value,clearInterval(n)),t.setValue(e)}),10)},y.prototype.animateTo=function(e,t=3,n=.1){let o=this.opts.max;t*=o/100,n*=o/100,e>o&&(e=o),e<0&&(e=0);var i=this.value,a=this;this.isAnimating=!0;var r=setInterval((function(){var o=i>e?+(e/i).toFixed(2):+(i/e).toFixed(2),l=o<.95?t-t*o:n;e<i?(i-=l)<=-e&&(a.value=e,clearInterval(r),a.cachedValue=a.value,a.isAnimating=!1):(i+=l)>=+e&&(a.value=e,e>=a.opts.max&&(a.svg.currentScale=0,setTimeout(e=>{a.setValue(a.opts.max),a.svg.currentScale=1},100)),clearInterval(r),a.cachedValue=a.value,a.isAnimating=!1),a.setValue(i)}),10)},y.prototype.changeBy=function(e){this.targetValue=this.targetValue?this.targetValue+e:this.value+e,this.animateTo(this.targetValue)},y.prototype.animateReset=function(){this.setValue(0)},y.prototype.polarToCartesian=function(e,t,n,o){var i=(o-90)*Math.PI/180;return{x:e+n*Math.cos(i),y:t+n*Math.sin(i)}},y.prototype.describeArc=function(e,t,n,o,i){var a=this.polarToCartesian(e,t,n,i),r=this.polarToCartesian(e,t,n,o),l=i-o<=180?"0":"1";return["M",a.x,a.y,"A",n,n,0,l,0,r.x,r.y].join(" ")},y.prototype.setValue=function(e){var t=e/this.opts.max*360;360===t&&(t=359.99);var n=this.size/2-this.strokeWidth/2,o=this.describeArc(n,n,n,180,180+t);this.slice.setAttribute("d",o);var i=this.size/3.5/3;this.text.innerHTML=Math.floor(e)+`<tspan font-size=${i} dy=${1.2*-i}>${this.opts.suffix}</tspan>`,this.value=e};class x{constructor(e,t="label",n="white",o=0,i=0,a=1,r=.25,l=.75,s=.8){this.widget=document.createElement("div"),this.widget.style.fontSize=2e3/9/4.5+"px",this.widget.style.marginTop=2e3/81+"px",this.widget.style.marginBottom=2e3/81+"px",this.widget.style.color=n,this.value=0,this.min=parseFloat(i),this.max=parseFloat(a),this.range=a-i,this.el=document.createElement("meter"),this.el.cachedValue=this.value,this.el.targetValue=!1,this.el.isAnimating=!1,this.el.setAttribute("value",o),this.el.setAttribute("min",i),this.el.setAttribute("max",a),this.el.setAttribute("low",r),this.el.setAttribute("high",l),this.el.setAttribute("optimum",s),this.el.style.width="156.25px",this.el.style.height="39.0625px",this.widget.appendChild(this.el),this.label=document.createElement("div"),this.label.style.textAlign="center",this.label.innerHTML=t,this.widget.appendChild(this.label),e.appendChild(this.widget)}animateTo(e){var t=parseFloat(this.el.getAttribute("value")),n=this.el;n.range=this.range,n.isAnimating=!0;var o=setInterval((function(){var i=t>e?+(e/t).toFixed(4):+(t/e).toFixed(4),a=i<.95?n.range/30-n.range/30*i:.003;e<t?(t-=a)<=-e&&(n.value=e,e<=0&&n.setValue(0),clearInterval(o),n.cachedValue=n.value,n.isAnimating=!1):(t+=a)>=+e&&(n.value=e,e>=100&&n.setValue(100),clearInterval(o),n.cachedValue=n.value,n.isAnimating=!1),n.value=t,this.value=t}),10)}changeBy(e){this.el.targetValue=this.el.targetValue?this.el.targetValue+e:this.el.cachedValue+e,this.animateTo(this.el.targetValue)}}var b={gameName:"Clean Start",welcomeMsg:"This world can be anything you dream it to be. ...  a carnival ... a haunted house .... a city ... anything ... it is all up to you.  You have the power to create.   May inspiration dwell in you forever.",playerLeftMsg:"... has packed up and headed for home.",theme:{fontFamily:"Arial",titleFontColor:"#C4A43C",formColor:"#fff",formFontColor:"white",formButtonColor:"#A82F1E",overlayColor:"rgba(0,0,0, 0.9)",fontSize:2,logo:"https://cdn.glitch.com/376a6bb1-e9b2-4998-af7a-cc4ea70344b8%2Fclean_start_128.png?v=1572433640155"},avatar:{models:[{type:2,url:"https://cdn.glitch.com/984a335f-9425-469e-8978-85c88c06d624%2Fboz_head.glb?v=1566741683664",lefthand:"https://cdn.glitch.com/984a335f-9425-469e-8978-85c88c06d624%2Fboz_lefthand.glb?v=1566749593952",righthand:"https://cdn.glitch.com/984a335f-9425-469e-8978-85c88c06d624%2Fboz_righthand.glb?v=1566749593705",scale:1,yOffset:0,animations:{idle:"idle",walk:"walk"},msg:{color:"orange",offset:"0 1.75 0"}},{type:1,url:"https://cdn.glitch.com/7001d18b-ab06-4934-84ee-f9bc0645e42c%2Fchip_eyes_pack.glb?1553596528401",scale:.75,yOffset:.1,animations:{idle:"idle",walk:"walk"},msg:{color:"orange",offset:"0 4 0"}},{type:1,url:"https://cdn.glitch.com/fec96da0-7526-4b9a-aecf-3abbbe7fcdc5%2Fmel.glb?v=1567388543651",scale:.75,yOffset:.1,animations:{idle:"idle",walk:"walk"},msg:{color:"orange",offset:"0 4 0"}}]},sounds:{playerJoined:{url:"https://cdn.glitch.com/376a6bb1-e9b2-4998-af7a-cc4ea70344b8%2Fwheer.mp3?v=1572442693465"},playerLeft:{url:"https://cdn.glitch.com/376a6bb1-e9b2-4998-af7a-cc4ea70344b8%2Fwheer.mp3?v=1572442693465"}},bgm:{songs:[326404324],volume:.2,playAll:!0,initialDelay:5e3},voice:{name:"Google UK English Female",rate:.9,pitch:1,volume:1,welcomeDelay:4e3}};window.onload=e=>{let t=`\n<div class="modal fade" id="login-modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: block;background-color:${b.theme.overlayColor}">\n    <div class="modal-dialog">\n\t\t  <div class="loginmodal-container" style="background-color:${b.theme.formColor}">\n          <image id="logo" src=${b.theme.logo} width="64px">\n          <h3 id="gamename" style="color:${b.theme.titleFontColor}">${b.gameName}</h3>\n\t\t\t<div>\t  \n\t\t\t\t\t<input  placeholder="username" class="q1">\n          <input  placeholder="password" type="password" class="q2"> \n          <button id="lb" style="background-color:${b.theme.formButtonColor}">Submit</button> \n          <div style="color:${b.theme.formButtonColor}" id="login-msg"></div> \n      </div>\t\t\t\t\n\n\t\t\t</div>\n\t</div>\n</div>\n`,n=document.querySelector("#login");function o(e){e.preventDefault(),CS1&&CS1.socket.connected?document.querySelector(".q1").value.length>0&&document.querySelector(".q2").value.length>0&&(navigator.vendor.includes("Apple")&&CS1.sounds.playerJoined.play().catch(e=>{console.log(e)}),CS1.login(document.querySelector(".q1").value,document.querySelector(".q2").value),document.querySelector(".q1").value="",document.querySelector(".q2").value=""):(n.style.zIndex=-1,n.setAttribute("hidden",""),CS1.myPlayer.components["movement-controls"].data.speed=CS1.myPlayer.startSpeed,CS1.sounds.playerJoined.play(),setTimeout(()=>{CS1.say(CS1.game.announcements.welcome)},CS1.game.welcomeDelay))}n.innerHTML=t,setTimeout(e=>{document.querySelector(".q1").focus(),CS1&&CS1.socket.connected||(document.getElementById("login-msg").innerHTML="OFFLINE MODE",document.querySelector("#lb").setAttribute("value","Play Game Offline"))},1e3),document.getElementById("lb").addEventListener("click",o),document.querySelector(".q2").addEventListener("keydown",e=>{"Enter"==e.code&&o(e)})},function(){AFRAME.registerComponent("cloud",{schema:{color:{type:"string",default:"blue"}},init:function(){const e=this.el;e.setAttribute("material","shader","cloud-shader"),e.setAttribute("material","myColor",this.data.color)},update:function(){this.el.setAttribute("material","myColor",this.data.color)}});AFRAME.registerShader("cloud-shader",{schema:{timeMsec:{type:"time",is:"uniform"},myOffset:{type:"vec3",is:"uniform"},myColor:{type:"color",is:"uniform",default:"pink"}},vertexShader:'\n\n//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise3(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n\n\n//\n// Based on @thespite\'s article:\n// \n// "Vertex displacement with a noise function using GLSL and three.js"\n// Source: https://www.clicktorelease.com/blog/vertex-displacement-noise-3d-webgl-glsl-three-js/\n//\n\nvarying float noise;\nuniform float timeMsec; // A-Frame time in milliseconds.\nuniform vec3 myOffset;\n\nfloat turbulence( vec3 p ) {\n\n  float w = 100.0;\n  float t = -.5;\n\n  for (float f = 1.0 ; f <= 10.0 ; f++ ){\n    float power = pow( 2.0, f );\n    t += abs( pnoise3( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );\n  }\n\n  return t;\n\n}\n\nvoid main() {\n  float time = timeMsec / 1000.0; // Convert from A-Frame milliseconds to typical time in seconds.\n  noise = 10.0 *  -.10 * turbulence( .5 * normal + time / 3.0 );\n  float b = 5.0 * pnoise3( 0.05 * position, vec3( 100.0 ) );\n  float displacement = (- 10. * noise + b) / 50.0;\n\n  vec3 newPosition = position + normal * displacement + myOffset;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n}\n\n',fragmentShader:"\n\nvarying float noise;\nuniform vec3 myColor;\n\nvoid main() {\n\n  vec3 color = myColor  - vec3(2. * noise);\n  gl_FragColor = vec4( color.rgb , 1.0 );\n\n}\n\n"})}();AFRAME.registerComponent("dotrow",{schema:{change:{type:"string",default:"x"},to:{type:"number",default:10}},init:function(){let e=this.data.change,t=this.data.to,n=this.el.getAttribute("position"),o=n[e],i=t>o?2:-2,a="x"==e;this.dots=[];let r=document.querySelector("a-scene");for(let e=o;e*(i/2)<t*(i/2);e+=i){let t=document.createElement("a-sphere");t.setAttribute("position",a?`${e} 1 ${n.z}`:`${n.x} 1 ${e}`),t.setAttribute("shader-frog","name:Ova_Shader"),t.setAttribute("radius","0.5"),t.setAttribute("collectible","affects:pointsDial;value:10;threshold:1.6"),r.appendChild(t),this.dots.push(t)}this.firstInitTime=Date.now()},update:function(){Date.now()-this.firstInitTime<5e3||(console.log("updating dotrow..."),this.dots.forEach(e=>{e.parentNode.removeChild(e)}),this.init())}});AFRAME.registerSystem("log",{schema:{console:{default:!0}},init:function(){var e=this.data,t=this.logs=[],n=this.loggers=[];window.CS1.log=function(o,i){t.push([o,i]),n.forEach((function(e){e.receiveLog(o,i)})),e.console&&console.log("[log:"+(i||"")+"] "+o)},window.CS1.socket.on("vr-log",e=>{window.CS1.log(e.msg,e.channel)}),window.CS1.logall=function(e,t){window.CS1.socket.emit("logall",{msg:e,channel:t})}},registerLogger:function(e){this.loggers.push(e),this.logs.forEach((function(t){e.receiveLog.apply(e,t)}))},unregisterLogger:function(e){this.loggers.splice(this.loggers.indexOf(e),1)}}),AFRAME.registerComponent("log",{schema:{channel:{type:"string"},filter:{type:"string"},max:{default:100},showErrors:{default:!0}},init:function(){this.logs=[],this.system.registerLogger(this)},play:function(){var e=this;this.el.sceneEl.addEventListener("log",(function(t){t.detail&&e.receiveLog(t.detail.message,t.detail.channel)})),window.onerror=function(t,n,o,i,a){e.receiveLog("Error: "+t)}},receiveLog:function(e,t){var n=this.data;"string"!=typeof e&&(e=JSON.stringify(e)),n.channel&&t&&n.channel!==t||n.filter&&-1===e.indexOf(n.filter)||(this.logs.push(e),n.max&&this.logs.length>n.max&&this.logs.shift(),this.el.setAttribute("text",{value:this.logs.join("\n")}))},remove:function(){this.el.removeAttribute("text"),this.system.unregisterLogger(this)}}),AFRAME.registerSystem("launchable",{schema:{},init:function(){CS1.socket.on("launch-sound",e=>{CS1.grabbables[e]&&CS1.grabbables[e].components.sound__launch&&CS1.grabbables[e].components.sound__launch.playSound()}),CS1.socket.on("launch-complete",e=>{CS1.grabbables[e].components.grabbable.isDragging=!1})}}),AFRAME.registerComponent("launchable",{schema:{burst:{type:"boolean",default:!0},launchSound:{type:"string",default:"https://cdn.glitch.com/83b7f985-f6ce-40dd-ac98-772aff98ebbf%2Fwoosh.mp3"}},dependencies:["grabbable"],init:function(){this.name=this.el.components.grabbable.name,console.log(`Launchable added with name: ${this.name}.`);let e=this;this.grabbable=e.el.components.grabbable,e.el.setAttribute("sound__launch",`src:url(${this.data.launchSound})`),e.el.addEventListener("grabEnd",t=>{e.launch()})},getDir:function(){if("Oculus Quest"==CS1.device){let e=this.grabbable.cursor.components.raycaster.raycaster.ray.direction;return e.x*=-1,e.y*=-1,e.z*=-1,e}return this.grabbable.cursor.object3D.getWorldDirection()},launch:function(e){CS1.socket.emit("logall",{msg:`${CS1.myPlayer.name} launched grabbable ${this.el.components.grabbable.name}!`,channel:"0"}),this.el.components.grabbable.isDragging=!0;const t={name:this.name,dir:e||this.getDir()};CS1.socket.emit("launch",t)}}),AFRAME.registerComponent("launchrow",{schema:{change:{type:"string",default:"x"},to:{type:"number",default:10}},init:function(){let e=this.data.change,t=this.data.to,n=this.el.getAttribute("position"),o=n[e],i=t>o?4:-4,a="x"==e;this.dots=[];let r=document.querySelector("a-scene");for(let e=o;e*(i/2)<t*(i/2);e+=i){let t=document.createElement("a-sphere");t.setAttribute("position",a?`${e} 1.4 ${n.z}`:`${n.x} 1.4 ${e}`),t.setAttribute("shader-frog","name:Disco_Shader"),t.setAttribute("radius","1"),t.setAttribute("collectible","affects:energyDial;value:-10;threshold:1.6"),t.setAttribute("grabbable",""),t.setAttribute("launchable",""),r.appendChild(t),this.dots.push(t)}this.firstInitTime=Date.now()},update:function(){Date.now()-this.firstInitTime<5e3||(console.log("updating dotrow..."),this.dots.forEach(e=>{e.parentNode.removeChild(e)}),this.init())}});const C=function(){const e=document.querySelector("#menu1"),t=document.querySelector("#main"),n=document.querySelector("#menu2");CS1.ui={},CS1.ui.controls={};const o=document.createElement("a-box");o.setAttribute("scale","0.7 0.7 0.7"),o.object3D.visible=!0,o.object3D.position.set(0,2.3,-.25),o.setAttribute("material","src:#chip"),n.appendChild(o),CS1.ui.controls.showBox=e=>{o.object3D.visible=!o.object3D.visible},CS1.ui.controls.addBlasterBall=e=>{const t=document.createElement("a-sphere");t.setAttribute("color","brown"),t.setAttribute("collectible","affects:energyDial ; value: -10"),t.setAttribute("launchable",""),t.classList="blasterball";const n=CS1.myPlayer.object3D.position;t.object3D.position.set(n.x,n.y+4,n.z),CS1.scene.appendChild(t)},document.addEventListener("click",(function t(){e.setAttribute("sound","src:url(https://cdn.glitch.com/36918312-2de3-4283-951d-240b263949f7%2Fclick.mp3?v=1561929149589)"),n.setAttribute("sound","src:url(https://cdn.glitch.com/36918312-2de3-4283-951d-240b263949f7%2Fclick.mp3?v=1561929149589)"),document.removeEventListener("click",t)}));let i=document.querySelector("#menu2-b1");i&&i.addEventListener("mouseenter",e=>{CS1.stats.container.getAttribute("visible")&&n.components.sound&&n.components.sound.playSound()}),i&&i.addEventListener("click",e=>{e.preventDefault(),o.setAttribute("material","src:#chip"),CS1.socket.playerData.faceIndex=1,CS1.myPlayer._avatarType=b.avatar.models[CS1.socket.playerData.faceIndex].type});let a=document.querySelector("#menu2-b2");a&&a.addEventListener("mouseenter",e=>{CS1.stats.container.getAttribute("visible")&&n.components.sound&&n.components.sound.playSound()}),a&&a.addEventListener("click",e=>{e.preventDefault(),o.setAttribute("material","src:#mel"),CS1.socket.playerData.faceIndex=2,CS1.myPlayer._avatarType=b.avatar.models[CS1.socket.playerData.faceIndex].type});let r=document.querySelector("#menu2-b3");r&&r.addEventListener("mouseenter",e=>{CS1.stats.container.getAttribute("visible")&&n.components.sound&&n.components.sound.playSound()}),r&&r.addEventListener("click",e=>{e.preventDefault(),o.setAttribute("material","src:#vr1"),CS1.socket.playerData.faceIndex=0,CS1.myPlayer._avatarType=b.avatar.models[CS1.socket.playerData.faceIndex].type});let l=document.querySelector("#menu1-b1");l&&l.addEventListener("mouseenter",t=>{CS1.stats.container.getAttribute("visible")&&e.components.sound&&e.components.sound.playSound()}),l.onclick=e=>{CS1.__display__stats()};let s=document.querySelector("#menu1-b2");s&&s.addEventListener("mouseenter",t=>{CS1.stats.container.getAttribute("visible")&&e.components.sound&&e.components.sound.playSound()}),s.onclick=e=>{t.innerHTML="<h1>Mission</h1>\n<p>Roam the virtual world looking for mission clues. Be nice and helpful to everyone you meet.</p>\n<p>Once you have gathered enough clues and your mission is clear, gather the neccessary resources and fulfill your calling. 🦄</p>\n           \n  "};let c=document.querySelector("#menu1-b3");c&&c.addEventListener("mouseenter",t=>{CS1.stats.container.getAttribute("visible")&&e.components.sound&&e.components.sound.playSound()}),c.onclick=e=>{t.innerHTML="<h1>Control Board</h1>\n\n<button onclick='CS1.ui.controls.showBox()'>Show/Hide Current Avatar Box</button>\n\n<button onclick='CS1.ui.controls.addBlasterBall()'>Blaster Ball</button>       "};let v=document.querySelector("#menu1-b4");v&&v.addEventListener("mouseenter",t=>{CS1.stats.container.getAttribute("visible")&&e.components.sound&&e.components.sound.playSound()}),v.onclick=e=>{t.innerHTML='  <h1>Limitations</h1>\n  <ul>\n      <li>All styles and images must be in the same origin or allow access via CORS; this allows the component to embed all of the assets required to render the html properly to the canvas via the foreignObject element. </li>\n      <li>transform-style css is limited to flat. This is mainly due to it not being rendered properly to canvas so element bounding for preserve-3d has not yet been implemented. If the rendering is fixed as some point I may go back and get it working as well.</li>\n      <li>"a-" tags do not render correctly as XHTML embeded into SVG, so any parent "a-" elements of the embed html will be converted to div tags for rendering. This may mean your css will require modification.</li>\n      <li>Elements that require rendering outside of the DOM such as the iframe and canvas element will not work.</li>\n      <li>:before and :after pseudo elements can\'t be accessed via the DOM so they can\'t be used in the element to determine the object bounds. As such, use them with caution. </li>\n      <li>Form elements are not consistently rendered to the canvas element so some basic default styles are included for consistency.</li>\n      <li>Currently there is no support for css transitions.</li>\n</ul>\n'}};AFRAME.registerSystem("vrui",{schema:{panels:{default:3}},dependencies:["htmlembed"],init:()=>{document.head.innerHTML+='<link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">\n <style>\n body{\n   font-family: \'Roboto\', sans-serif;\n   \n   font-size: 32px;\n }\n h1{\n   font-size: 52px;\n }\n .dark{\n   background-color: rgba(0,0,0,0.2);\n   border-radius:50px;  \n   background-repeat: no-repeat;\n   background-position: bottom right;\n   padding: 40px;\n   color: #fff;\n }\n .main{\n   width: 1024px;\n   height: 900px;\n   overflow: hidden;\n }\n.main ul{\n   font-size: 26px;\n   margin: 0;\n   padding: 0;\n }\n .menu{\n   width: 256px;\n   height: 900px;\n   text-align: center;\n }\n .menu ul{\n   list-style-type: none;\n   margin: 0;\n   padding: 0;\n }\n .menu button,.main button{\n   display: inline-block;\n   width: 100%;\n   height: 100px;\n   border-radius: 20px;\n   background-color: #000;\n   color: #fff;\n   text-decoration: none;\n   text-align: center;\n   font-size: 32px;\n   padding: 10px 0;\n   margin-bottom: 20px;\n }\n .menu button:hover{\n   background-color: #fff;\n   color: #888;\n }\n .menu button:active{\n   background-color: #fff;\n   color: #888;\n   box-shadow: 0px 0px 50px #00d2ff;\n }\n .imgLink{\n   width: 100%;\n   border-radius: 20px;\n   color: #fff!important;\n   text-decoration: none!important;\n   text-align: center;\n   padding: 10px 0;\n   margin-bottom: 20px;\n   background-color: #444;\n   border: 3px solid #444;\n   text-shadow: none;\n   display: block;\n }\n .imgLink:hover{\n   border: 3px solid #000;\n   background-color: #fff;\n   color:#000!important;\n }\n.imgLink:active{\n   background-color: #fff;\n   box-shadow: 0px 0px 50px #00d2ff;\n   color:#000!important;\n }\n.imgLink img , .imgLink div{\n  pointer-events: none;\n}\n .code{\n   white-space: pre;\n   font-size: 0.7em;\n   background-color: #000;\n   margin-bottom: 30px;\n }\n </style>\n';const e=document.createElement("a-entity");e.setAttribute("style","visibility:hidden"),e.setAttribute("vrui",""),e.id="embed-container",e.innerHTML='<a-entity id="menu1" class="screen menu dark"  position="-2.712 1.5 -1.476" rotation="0 45 0">\n  <h2>Menu</h2>\n  <ul>\n    <li><button id="menu1-b1" >Stats</button></li>\n    <li><button id="menu1-b2" >Mission</button></li>\n    <li><button id="menu1-b3" >Control Panel</button></li>\n    <li><button id="menu1-b4" >Limitations</button></li>\n  </ul>\n</a-entity>\n<a-entity id="main" class="screen dark main" position="0 1.5 -2"></a-entity>\n<a-entity id="menu2" class="screen menu dark" position="2.712 1.5 -1.476" rotation="0 -45 0">\n  <h2>Avatars</h2>\n  <a id="menu2-b1" class="imgLink" href="#">\n    <img crossorigin="anonymous"   src="https://cdn.glitch.com/fec96da0-7526-4b9a-aecf-3abbbe7fcdc5%2Fchip.png?v=1567384714024" width="80" height="80">\n    <div>Chip</div>\n  </a>\n  <a id="menu2-b2" class="imgLink" href="#">\n    <img crossorigin="anonymous"  src="https://cdn.glitch.com/fec96da0-7526-4b9a-aecf-3abbbe7fcdc5%2Fmel.png?v=1567389128396" width="80" height="80">\n    <div>Mel</div>\n  </a>\n  <a id="menu2-b3" class="imgLink" href="#">\n    <img  crossorigin="anonymous" src="https://cdn.glitch.com/fec96da0-7526-4b9a-aecf-3abbbe7fcdc5%2Fvr.png?v=1567383953311" width="80" height="80">\n    <div>VR-1</div>\n  </a>\n</a-entity>\n\n',document.querySelector("a-scene").appendChild(e),document.addEventListener("gameStart",e=>{const t=document.createElement("div");t.style.width="100%",t.style.height="100%",t.appendChild(CS1.stats.container),CS1.__display__stats=function(){const e=document.querySelector("#main");e.innerHTML="",e.appendChild(t)},document.querySelector("#main").appendChild(t),document.querySelector("a-scene");let n=document.querySelector("#embed-container");n.setAttribute("visible",!1),n.setAttribute("position","0 0.3 0"),CS1.myPlayer.add(n),CS1.stats.container=n;let o=document.querySelector("#main"),i=document.querySelector("#menu1"),a=document.querySelector("#menu2");o.setAttribute("htmlembed",""),i.setAttribute("htmlembed",""),a.setAttribute("htmlembed",""),C(),document.querySelectorAll(".dark").forEach(e=>{e.classList.remove("screen")});let r=CS1.myPlayer.components.player.lh.components["oculus-touch-controls"],l=CS1.myPlayer.components.player.rh.components["oculus-touch-controls"];"Oculus Quest"==CS1.device?(document.querySelector("a-cursor").pause(),CS1.cam.components.raycaster&&CS1.cam.components.raycaster.pause(),r.el.addEventListener("abuttondown",e=>{CS1.stats.container.object3D.rotation.y=CS1.cam.object3D.rotation.y;let t=CS1.stats.container.getAttribute("visible");CS1.stats.container.setAttribute("visible",!t),t?document.querySelectorAll(".dark").forEach(e=>{e.classList.remove("screen")}):document.querySelectorAll(".dark").forEach(e=>{e.classList.add("screen")})}),l.el.addEventListener("abuttondown",e=>{CS1.stats.container.object3D.rotation.y=CS1.cam.object3D.rotation.y;let t=CS1.stats.container.getAttribute("visible");CS1.stats.container.setAttribute("visible",!t),t?document.querySelectorAll(".dark").forEach(e=>{e.classList.remove("screen")}):document.querySelectorAll(".dark").forEach(e=>{e.classList.add("screen")})})):"Standard"==CS1.device?document.addEventListener("keypress",e=>{if("Backquote"==e.code){CS1.stats.container.object3D.rotation.y=CS1.cam.object3D.rotation.y;let e=CS1.stats.container.getAttribute("visible");CS1.stats.container.setAttribute("visible",!e),e?document.querySelectorAll(".dark").forEach(e=>{e.classList.remove("screen")}):document.querySelectorAll(".dark").forEach(e=>{e.classList.add("screen")})}}):"Mobile"==CS1.device&&document.addEventListener("doubleTapMenu",e=>{CS1.stats.container.object3D.rotation.y=CS1.cam.object3D.rotation.y;let t=CS1.stats.container.getAttribute("visible");CS1.stats.container.setAttribute("visible",!t),t?document.querySelectorAll(".dark").forEach(e=>{e.classList.remove("screen")}):document.querySelectorAll(".dark").forEach(e=>{e.classList.add("screen")})})})}}),AFRAME.registerComponent("chat",{schema:{inputColor:{default:"#fff"},keyboardColor:{default:"#fff"},highlightColor:{default:"#1a79dc"}},dependencies:["aframe-keyboard"],init:function(){this.container=document.createElement("a-entity"),this.container.setAttribute("visible",!1),this.input=document.createElement("a-text"),this.input.setAttribute("font","dejavu"),this.input.setAttribute("color",this.data.inputColor),this.input.setAttribute("value","Enter message ..."),this.input.setAttribute("scale","0.7 0.7 0.7"),this.input.setAttribute("rotation","-20 0 0"),this.input.setAttribute("position","-0.5 1.9 -1.5"),this.keyboard=document.createElement("a-entity"),this.keyboard.setAttribute("a-keyboard","dismissable:false"),this.keyboard.setAttribute("position","-1 1.6 -1.5"),this.keyboard.setAttribute("rotation","-20 0 0"),this.keyboard.setAttribute("scale","4 4 4"),this.container.appendChild(this.input),this.container.appendChild(this.keyboard),this.el.appendChild(this.container);const e=this;document.addEventListener("gameStart",t=>{e.normalKeys=document.querySelectorAll(".collidable"),document.querySelectorAll(".collidable").forEach(e=>{e.classList.remove("collidable")});const n=document.querySelector("#standard-chat-dummy");function o(){e.input.setAttribute("value",e.value),e.container.setAttribute("visible",!1),document.querySelectorAll(".collidable").forEach(e=>{e.classList.remove("collidable")}),e.keyboard.components["a-keyboard"].pause(),document.removeEventListener("a-keyboard-update",i),CS1.socket.emit("msg",{msg:e.value}),n.blur()}function i(t){switch(parseInt(t.detail.code)){case 8:e.value=e.value.slice(0,-1);break;case 999:case 13:return void o();default:if(!t.detail.value)return;40==t.detail.code&&(t.detail.value="\n"),e.value=e.value+t.detail.value}e.input.setAttribute("value",e.value+"_")}function a(t){switch(parseInt(t.detail.code)){case 8:e.value=e.value.slice(0,-1);break;case 999:return e.input.setAttribute("value",e.value),e.container.setAttribute("visible",!1),document.querySelectorAll(".collidable").forEach(e=>{e.classList.remove("collidable")}),e.keyboard.components["a-keyboard"].pause(),document.removeEventListener("a-keyboard-update",a),void CS1.socket.emit("msg",{msg:e.value});default:if(!t.detail.value)return;40==t.detail.code&&(t.detail.value="\n"),e.value=e.value+t.detail.value}e.input.setAttribute("value",e.value+"_")}e.value="";let r=CS1.myPlayer.components.player.lh.components["oculus-touch-controls"],l=CS1.myPlayer.components.player.rh.components["oculus-touch-controls"];switch(CS1.device){case"Oculus Quest":document.querySelector("a-cursor").pause(),CS1.cam.components.raycaster&&CS1.cam.components.raycaster.pause(),r.el.addEventListener("bbuttondown",t=>{e.value="",e.input.setAttribute("value",e.value),document.addEventListener("a-keyboard-update",a),e.container.object3D.rotation.y=CS1.cam.object3D.rotation.y;let n=e.container.getAttribute("visible");e.container.setAttribute("visible",!n),e.keyboard.components["a-keyboard"].play(),n?document.querySelectorAll(".collidable").forEach(e=>{e.classList.remove("collidable")}):e.keys.forEach(e=>{e.classList.add("collidable")})}),l.el.addEventListener("bbuttondown",t=>{e.value="",e.input.setAttribute("value",e.value),document.addEventListener("a-keyboard-update",a),e.container.object3D.rotation.y=CS1.cam.object3D.rotation.y;let n=e.container.getAttribute("visible");e.container.setAttribute("visible",!n),e.keyboard.components["a-keyboard"].play(),n?document.querySelectorAll(".collidable").forEach(e=>{e.classList.remove("collidable")}):AFK.template.toggleActiveMode("normal")});break;case"Mobile":CS1.chatInput=document.querySelector("#mobile-chat-input"),CS1.chatInput.style.position="absolute",CS1.chatInput.style.top="10px",CS1.chatInput.style.margin="0 auto",CS1.chatInput.addEventListener("keydown",e=>{switch(e.keyCode){case 13:CS1.socket.emit("msg",{msg:CS1.chatInput.value}),CS1.chatInput.style.zIndex=-1e3,CS1.chatInput.style.top="-100px",CS1.chatInput.blur()}}),document.addEventListener("doubleTapChat",e=>{-1e3==CS1.chatInput.style.zIndex?(CS1.chatInput.style.zIndex=200,CS1.chatInput.style.top="10px"):(CS1.chatInput.style.zIndex=-1e3,CS1.chatInput.style.top="-100px")});break;case"Standard":document.querySelector("#mobile-chat-input").setAttribute("style","position:absolute;top:-1000px");const t=document.querySelector("#standard-chat-dummy");document.addEventListener("keypress",n=>{if(61==n.keyCode){e.value="",e.input.setAttribute("value",e.value),document.addEventListener("a-keyboard-update",i),e.container.object3D.rotation.y=CS1.cam.object3D.rotation.y;let n=e.container.getAttribute("visible");e.container.setAttribute("visible",!n),e.keyboard.components["a-keyboard"].play(),n?document.querySelectorAll(".collidable").forEach(e=>{t.blur(),e.classList.remove("collidable")}):(AFK.template.toggleActiveMode("normal"),e.normalKeys.forEach(e=>{t.focus(),e.classList.add("collidable")}))}})}})}}),AFRAME.registerComponent("cs1-jukebox",{schema:{},init:function(){CS1.jukebox.audio.addEventListener("jukeboxplay",e=>{CS1.socket.emit("jukebox",{action:"play",index:e.detail.index,player:CS1.myPlayer.name}),CS1.log(`${CS1.myPlayer.name} is playing ${CS1.jukebox.songNames[e.detail.index]}.`)}),CS1.jukebox.audio.addEventListener("jukeboxpause",e=>{CS1.socket.emit("jukebox",{action:"pause",player:CS1.myPlayer.name}),CS1.log(`${CS1.myPlayer.name} has paused the jukebox.`)}),CS1.socket.on("jukebox",e=>{if(e.player!=CS1.myPlayer.name)switch(e.action){case"play":CS1.jukebox.play(e.index),CS1.log(`${e.player} is playing ${CS1.jukebox.songNames[e.index]}!`);break;case"pause":CS1.jukebox.pause(!1),CS1.log(`${e.player} has paused the jukebox!`)}})}}),document.addEventListener("gameStart",e=>{}),AFRAME.registerComponent("mycomponent",{schema:{color:{default:"red"}},init:function(){}});let w=window.CS1={};(e=>{e.utils={uid:(()=>{const e={value:"0"};let t="123456789".split("").reduce((e,t,n,o)=>{const i={};return i.value=t,i.prev=e,i},e);return e.prev=t,function(){let e=Date.now();return"object"==typeof performance&&"function"==typeof performance.now&&(e=performance.now().toString().replace(".","")),t=t.prev,`${e}${Math.random().toString(16).substr(2)}${t.value}`}})(),isEqual:function(e,t){function n(e,t){var n=Object.prototype.toString.call(e);if(n!==Object.prototype.toString.call(t))return!1;if("[object Function]"===n){if(e.toString()!==t.toString())return!1}else if(e!==t)return!1}for(var o in e)if(e.hasOwnProperty(o)&&!1===n(e[o],t[o]))return!1;return!0},toColor:function(e){return"rgba("+[(16711680&(e>>>=0))>>>16,(65280&e)>>>8,255&e,((4278190080&e)>>>24)/255].join(",")+")"},randomFromArray:function(e){return e.length>0&&e[Math.floor(Math.random()*e.length)]}}})(w),(e=>{function t(){}function n(){let e=arguments.length,t=arguments[0];if(e<2)return t;for(let n=1;n<e;n++){let e=arguments[n],o=Object.keys(e||{}),i=o.length;for(let n=0;n<i;n++){let i=o[n];t[i]=e[i]}}return t}function o(e){return n({},e)}function i(e,...t){let n,i,a=o(e);for(n=0;i=t[n++];)delete a[i];return a}e.shaderfrog=f,t.prototype={mainCamera:null,cubeCameras:{},reserved:{time:null,cameraPosition:null},umap:{float:{type:"f",value:0},int:{type:"i",value:0},vec2:{type:"v2",value:()=>new THREE.Vector2},vec3:{type:"v3",value:()=>new THREE.Vector3},vec4:{type:"v4",value:()=>new THREE.Vector4},samplerCube:{type:"t"},sampler2D:{type:"t"}},getUmap(e){let t=this.umap[e].value;return"function"==typeof t?t():t},registerCamera(e){if(!(e instanceof THREE.Camera))throw new Error("Cannot register a non-camera as a camera!");this.mainCamera=e},registerCubeCamera(e,t){if(!t.renderTarget)throw new Error("Cannot register a non-camera as a camera!");this.cubeCameras[e]=t},unregisterCamera(e){if(e in this.cubeCameras)delete this.cubeCameras[e];else{if(e!==this.mainCamera)throw new Error("You never registered camera "+e);delete this.mainCamera}},updateSource(e,t,o){if(o=o||"name",!this.shaderTypes[e])throw new Error("Runtime Error: Cannot update shader "+e+" because it has not been added.");let a,r,l=this.add(e,t);for(r=0;a=this.runningShaders[r++];)a[o]===e&&(n(a.material,i(l,"id")),a.material.needsUpdate=!0)},renameShader(e,t){let n,o;if(!(e in this.shaderTypes))throw new Error("Could not rename shader "+e+" to "+t+". It does not exist.");for(this.shaderTypes[t]=this.shaderTypes[e],delete this.shaderTypes[e],n=0;o=this.runningShaders[n++];)o.name===e&&(o.name=t)},get(e){let t=this.shaderTypes[e];return t.initted||this.create(e),t.material},add(e,t){let i,a=o(t);for(var r in a.fragmentShader=t.fragment,a.vertexShader=t.vertex,delete a.fragment,delete a.vertex,a.uniforms)null===(i=a.uniforms[r]).value&&(a.uniforms[r].value=this.getUmap(i.glslType));return e in this.shaderTypes?n(this.shaderTypes[e],a):this.shaderTypes[e]=a,a},create(e){let t=this.shaderTypes[e];return delete t.id,t.material=new THREE.RawShaderMaterial(t),this.runningShaders.push(t),t.init&&t.init(t.material),t.material.needsUpdate=!0,t.initted=!0,t.material},updateRuntime(e,t,n){let o,i,a,r;for(n=n||"name",i=0;o=this.runningShaders[i++];)if(o[n]===e)for(a in t.uniforms)a in this.reserved||a in o.material.uniforms&&("t"===(r=t.uniforms[a]).type&&"string"==typeof r.value&&(r.value=this.cubeCameras[r.value].renderTarget),o.material.uniforms[a].value=t.uniforms[a].value)},updateShaders(e,t){let n,o;for(t=t||{},o=0;n=this.runningShaders[o++];){for(let e in t.uniforms)e in n.material.uniforms&&(n.material.uniforms[e].value=t.uniforms[e]);"cameraPosition"in n.material.uniforms&&this.mainCamera&&(n.material.uniforms.cameraPosition.value=this.mainCamera.position.clone()),"viewMatrix"in n.material.uniforms&&this.mainCamera&&(n.material.uniforms.viewMatrix.value=this.mainCamera.matrixWorldInverse),"time"in n.material.uniforms&&(n.material.uniforms.time.value=e)}},shaderTypes:f,runningShaders:[]},AFRAME.registerSystem("shader-frog",{init:function(){this.frog_runtime=new t,this.clock=new THREE.Clock;var e=this,n=document.querySelector("a-scene");function o(){var t=document.querySelector("a-scene").systems.camera;t&&t.sceneEl&&t.sceneEl.camera&&(t=t.sceneEl.camera,e.frog_runtime.registerCamera(t))}n.hasLoaded?o().bind(this):n.addEventListener("loaded",o)},tick:function(e){this.frog_runtime.updateShaders(this.clock.getElapsedTime())}}),AFRAME.registerComponent("shader-frog",{schema:{name:{type:"string"}},init:function(){this.originalMaterial=this.el.getObject3D("mesh").material,this.shaderData=f[this.data.name]},update:function(){this.system.frog_runtime.add(this.data.name,this.shaderData);var e=this.system.frog_runtime.get(this.data.name);this.el.getObject3D("mesh").material=e},remove:function(){this.el.getObject3D("mesh").material=this.originalMaterial}})})(w),(e=>{AFRAME.registerComponent("proximity-glitch",{schema:{threshold:{type:"number",default:2},affects:{type:"string",default:""},value:{type:"number",default:-.1},sound:{type:"string",default:"https://cdn.glitch.com/6b222f93-e194-41e2-aaf6-59e5af64658d%2Fbuzz.mp3?1555284089077"}},init:function(){this.sound=document.createElement("a-sound"),this.sound.setAttribute("src",`url(${this.data.sound})`),this.el.appendChild(this.sound),this.soundIsPlaying=!1,this.sound.addEventListener("sound-ended",e=>{this.soundIsPlaying=!1}),this.scene=document.querySelector("a-scene"),this.scene.setAttribute("glitch",""),this.baseEffects=this.scene.getAttribute("effects")},tick:function(t,n){e.game.playerDistanceTo(this.el)<this.data.threshold?(this.scene.setAttribute("effects",`glitch,${this.baseEffects}`),this.data.affects&&(e.hud[this.data.affects].setValue(e.hud[this.data.affects].value+this.data.value),this.soundIsPlaying||(this.sound.components.sound.playSound(),this.soundIsPlaying=!0))):this.scene.setAttribute("effects",this.baseEffects)}})})(w),(e=>{window.addEventListener("load",(function(){e.stats={};let t=document.createElement("div");if(t.id="vr-stats",e.stats.container=t,!t)return;let n=function(e){let t={};{let n=document.createElement("div");n.id="stats-top",n.style.position="relative",n.style.left="0px",n.style.top="0px",n.style.width="2000px",n.style.height="500px",t.top=n,e.appendChild(n)}return t}(t);n.top.style.pointerEvents="none",e.stats.pointsDial=new y({container:n.top,labelText:"points",labelColor:"#ccc",gradientColor1:"white",gradientColor2:"red",max:1e3}),e.stats.energyDial=new y({container:n.top,labelText:"energy",labelColor:"#ccc",gradientColor1:"white",gradientColor2:"lime",max:1e3}),e.stats.energyDial.setValue(500),e.stats.magicDial=new y({container:n.top,labelText:"magic",labelColor:"#ccc",gradientColor1:"white",gradientColor2:"#b45ef9",suffix:"%",max:100}),e.stats.oxygenMeter=new x(n.top,"oxygen","#ccc",1)}))})(w),(e=>{AFRAME.registerComponent("game",{schema:{mode:{type:"string",default:"standard"}},init:function(){e.game=this,this.isRunning=!1,this.determineDevice(),this.name=b.gameName,this.announcements={},this.announcements.welcome=b.welcomeMsg,this.welcomeDelay=b.voice.welcomeDelay,document.querySelector("#scene-container").style.display="block",document.querySelector("#loading-screen").style.display="none",e.voices=window.speechSynthesis.getVoices(),e.say=function(e,t="none given"){(e=new SpeechSynthesisUtterance(e)).voice="none given"==t?speechSynthesis.getVoices().filter((function(e){return e.name==b.voice.name}))[0]:speechSynthesis.getVoices().filter((function(e){return e.name==t}))[0],e.pitch=b.voice.pitch,e.rate=b.voice.rate,e.volume=b.voice.volume,speechSynthesis.speak(e)},e.sayall=function(t,n){e.socket.emit("sayall",{msg:t,name:n})},e.printVoices=()=>{speechSynthesis.getVoices().forEach(e=>{console.log(e.name,e.lang)})},e.sounds={},Object.keys(b.sounds).forEach(t=>{e.sounds[t]=new Audio(b.sounds[t].url),e.sounds[t].loop=b.sounds[t].loop||!1,e.sounds[t].volume=b.sounds[t].volume||1}),e.scene=AFRAME.scenes[0],e.otherPlayers={}},tick:function(e,t){},start:function(){e.logall=function(t,n=""){e.socket.emit("logall",{msg:t,channel:n})},"Oculus Quest"==e.device&&(e.myPlayer.leftHand=e.myPlayer.components.player.lh,e.myPlayer.rightHand=e.myPlayer.components.player.rh,e.socket.emit("logall",{msg:`${e.myPlayer.name} is playing with an Oculus VR device!`,channel:"0"})),e.game.hasBegun=!0;let t=new CustomEvent("gameStart",{detail:{message:"Let's play!",time:new Date},bubbles:!0,cancelable:!0});document.body.dispatchEvent(t)},playerDistanceTo:function(t){return e.myPlayer.object3D.position.distanceTo(t.object3D.position)},fireParticles:function(e){e.components.particles.fire()},determineDevice:function(){navigator.getVRDisplays().then((function(t){let n=document.querySelector("a-scene");if(t&&t[0]&&"Oculus Quest"==t[0].displayName)document.querySelector("#cam-cursor").setAttribute("visible",!1),document.querySelector("#cam-cursor").setAttribute("fuse",!1),document.querySelector("#cam-cursor").pause(),e.device="Oculus Quest";else if(AFRAME.utils.device.isMobile()){e.myPlayer.cursor=document.querySelector("#cam-cursor"),e.device="Mobile",e.log("Mobile"),n.setAttribute("vr-mode-ui","enabled: false"),e.mylatesttap=0;let t=document.querySelector("#mobile-btn-container"),o=document.createElement("img");o.setAttribute("src","https://cdn.glitch.com/376724db-dc5f-44ca-af35-36d00838079c%2Fmenu-64-icon.png?v=1562375093680"),o.setAttribute("style","position:absolute;right:0px"),t.appendChild(o),o.addEventListener("touchstart",t=>{let n=(new Date).getTime()-e.mylatesttap;if(n<600&&n>0){let e=new CustomEvent("doubleTapMenu",{detail:{message:"Double Tappin!",time:new Date},bubbles:!0,cancelable:!0});document.body.dispatchEvent(e)}e.mylatesttap=(new Date).getTime()});let i=document.createElement("img");i.setAttribute("src","https://cdn.glitch.com/376724db-dc5f-44ca-af35-36d00838079c%2Fchat-64-icon.png?v=1562528152057"),i.setAttribute("style","position:absolute;left:0px"),t.appendChild(i),i.addEventListener("touchstart",t=>{let n=(new Date).getTime()-e.mylatesttap;if(n<600&&n>0){let e=new CustomEvent("doubleTapChat",{detail:{message:"Double Tappin!",time:new Date},bubbles:!0,cancelable:!0});document.body.dispatchEvent(e)}e.mylatesttap=(new Date).getTime()})}else e.device="Standard",n.setAttribute("vr-mode-ui","enabled: false"),e.myPlayer.cursor=document.querySelector("#cam-cursor")}))}})})(w),(e=>{AFRAME.registerSystem("player",{schema:{avatars:{default:b.avatar.models}},init:function(){function t(e,t){e.model.removeAttribute("gltf-model"),e.HEAD?(e.HEAD.setAttribute("visible",!0),e.HAND_L.setAttribute("visible",!0),e.HAND_R.setAttribute("visible",!0)):(e.HEAD=document.createElement("a-gltf-model"),e.HAND_L=document.createElement("a-gltf-model"),e.HAND_R=document.createElement("a-gltf-model"),e.model.appendChild(e.HEAD),e.model.appendChild(e.HAND_L),e.model.appendChild(e.HAND_R),e.HEAD.setAttribute("src",t.url),e.HAND_L.setAttribute("src",t.lefthand),e.HAND_R.setAttribute("src",t.righthand))}e.__addOtherPlayer=n=>{console.log(`Adding new player with id: ${n.id}`),console.log(n),console.log(n.data);let o=b.avatar.models[n.data.faceIndex],i=document.createElement("a-entity");i.model=document.createElement("a-gltf-model"),i.avatarType=o.type,i.faceIndex=n.data.faceIndex,i.device=n.data.device,i.appendChild(i.model),i.setAttribute("player",""),i.model.setAttribute("shadow",""),i.model.setAttribute("scale",`${o.scale} ${o.scale} ${o.scale}`),i.model.setAttribute("visible","true"),1===i.avatarType?(i.model.setAttribute("src",`${o.url}`),i.model.setAttribute("animation-mixer","clip:idle"),i.model.setAttribute("rotation",`${-n.data.rotation.x} ${n.data.rotation.y+180} ${n.data.rotation.z}`)):2===i.avatarType&&t(i,o),i.id=n.id,i.name=n.name,i.setAttribute("position",`${n.data.position.x} ${n.data.position.y} ${n.data.position.z}`),i.msg=document.createElement("a-entity");let a=`Hello\nI am\n${n.name}!`;i.msg.setAttribute("text",`value:${a};\n                                     align:center;\n                                     width:8;\n                                     wrap-count:24; \n                                     color:yellow`),i.msg.setAttribute("position",o.msg.offset),i.msg.setAttribute("rotation","0 0 0"),i.model.appendChild(i.msg),e.scene.appendChild(i),e.otherPlayers[i.id]=i,e.sounds.playerJoined.play()},e.__updateOtherPlayers=n=>{Object.keys(n).forEach((function(o,i){if(o!=e.socket.id&&e.otherPlayers[o]){let i=b.avatar.models[n[o].faceIndex],a=e.otherPlayers[o];a.faceIndex!=n[o].faceIndex&&(a.faceIndex=n[o].faceIndex,1==i.type?a.model.setAttribute("src",i.url):a.model.setAttribute("src",""),a.avatarType!=i.type&&(a.avatarType=i.type,1==i.type?(a.HEAD&&(a.HEAD.setAttribute("visible",!1),a.HAND_L.setAttribute("visible",!1),a.HAND_R.setAttribute("visible",!1)),a.model.setAttribute("animation-mixer","clip:idle"),a.model.object3D.position.y=0):(a.model.setAttribute("rotation","0 0 0"),t(a,i)))),a.setAttribute("position",`${n[o].position.x} ${n[o].position.y+i.yOffset} ${n[o].position.z}`),a.model.setAttribute("scale",`${i.scale} ${i.scale} ${i.scale}`),a.msg.setAttribute("text",`color:${i.msg.color}`),2===a.avatarType&&a.HEAD&&"Oculus Quest"===a.device?(a.model.object3D.rotation.set(0,THREE.Math.degToRad(n[o].rotation.y+180),0),a.isWalking&&(a.model.object3D.position.y=Math.cos(e.myPlayer.timePlayed/100)/10),a.msg.object3D.position.set(0,3,0),a.HEAD.object3D.position.y=1.4,a.HEAD.object3D.rotation.set(THREE.Math.degToRad(-n[o].rotation.x/2),0,0),a.HAND_L.object3D.position.set(-1.2*n[o].lhp.x,1.2*n[o].lhp.y+.1,-3*n[o].lhp.z),a.HAND_L.object3D.rotation.set(THREE.Math.degToRad(45-n[o].lhr.x),THREE.Math.degToRad(n[o].lhr.y-90),THREE.Math.degToRad(n[o].lhr.z)),a.HAND_R.object3D.position.set(-1.2*n[o].rhp.x,1.2*n[o].rhp.y+.1,-3*n[o].rhp.z),a.HAND_R.object3D.rotation.set(THREE.Math.degToRad(45-n[o].rhr.x),THREE.Math.degToRad(n[o].rhr.y+90),THREE.Math.degToRad(n[o].rhr.z))):2===a.avatarType&&a.HEAD?(a.msg.setAttribute("position",`${i.msg.offset}`),a.model.object3D.rotation.set(0,THREE.Math.degToRad(n[o].rotation.y+180),0),a.isWalking?a.model.object3D.position.y=1.4+Math.cos(e.myPlayer.timePlayed/100)/10:a.model.object3D.position.y=1.4,a.HEAD.object3D.rotation.set(THREE.Math.degToRad(-n[o].rotation.x/2),0,0),a.HAND_L.object3D.position.set(1,0,0),a.HAND_L.object3D.rotation.set(THREE.Math.degToRad(0),THREE.Math.degToRad(0),THREE.Math.degToRad(0)),a.HAND_R.object3D.position.set(-1,0,0),a.HAND_R.object3D.rotation.set(THREE.Math.degToRad(0),THREE.Math.degToRad(0),THREE.Math.degToRad(0))):1===a.avatarType&&(a.msg.setAttribute("position",`${i.msg.offset}`),a.model.setAttribute("rotation",`${-n[o].rotation.x/8} ${n[o].rotation.y+180} ${n[o].rotation.z}`))}}))},e.__removePlayer=t=>{e.otherPlayers[t].parentNode.removeChild(e.otherPlayers[t]),delete e.otherPlayers[t],e.sounds.playerLeft.play()},e.__setPlayerMessage=t=>{if(e.otherPlayers[t.id]){let n=b.avatar.models[e.otherPlayers[t.id].faceIndex];e.otherPlayers[t.id].msg.setAttribute("text",`value:${t.msg};\n        align:center;width:8;wrap-count:24;color:${n.msg.color}`)}}}}),AFRAME.registerComponent("player",{schema:{me:{type:"boolean",default:!1},eyelevel:{default:1.6},cursorcolor:{default:"crimson"},rayobjects:{default:"[grabbable],.screen,.collidable,.jukebox"},rayfar:{default:4},speed:{default:.2}},init:function(){const t=this;this.data.me&&(e.myPlayer=this.el,this.addCam(t),this.addHands(t),this.isWalking=!1,this.addMyListeners(),this.el.timePlayed=0,this.el.setAttribute("chat",""),this.el.setAttribute("userdata",""),e.myPlayer.spawnPos=this.el.getAttribute("position"),e.myPlayer.spawnRot=this.el.getAttribute("rotation"),this.totalSteps=0,this.active=!1)},addCam:function(t){const n=document.querySelector("[camera][wasd-controls]");n.removeAttribute("wasd-controls"),n.removeAttribute("look-controls"),n.setAttribute("camera","active:false"),t.cam=document.createElement("a-entity"),t.cam.id="cam",e.cam=t.cam,t.cam.setAttribute("camera","active:true"),t.cam.setAttribute("position",`0 ${this.data.eyelevel} 0`),t.cam.setAttribute("look-controls","pointerLockEnabled:true;reverseTouchDrag:true");const o=document.createElement("a-cursor");o.id="cam-cursor",o.setAttribute("material",`color:${this.data.cursorcolor}`),o.setAttribute("raycaster",`objects:${this.data.rayobjects};far:${this.data.rayfar}`),t.cam.appendChild(o),t.el.appendChild(t.cam),t.cam.addEventListener("loaded",e=>{n.parentNode.removeChild(n)})},addHands:function(e){e.lh=document.createElement("a-entity"),e.lh.setAttribute("laser-controls","hand:left"),e.lh.setAttribute("raycaster",`objects:${this.data.rayobjects};far:${this.data.rayfar};useWorldCoordinates:true`),e.rh=document.createElement("a-entity"),e.rh.setAttribute("laser-controls","hand:right"),e.rh.setAttribute("raycaster",`objects:${this.data.rayobjects};far:${this.data.rayfar};useWorldCoordinates:true`),e.el.appendChild(e.lh),e.el.appendChild(e.rh)},addMyListeners:function(){let t=this;e.myPlayer.setAttribute("movement-controls","speed:0;camera:#cam"),document.addEventListener("gameStart",n=>{t.el.id=e.socket.id,t.el.classList="my-player",t.active=!0,"Oculus Quest"==e.device&&(t.setOculusCtls(),e.scene.enterVR(),this.lh.addEventListener("model-loaded",e=>{this.lh.loaded=!0;const t=this.lh.getObject3D("mesh");t&&t.traverse((function(e){e.isMesh&&e.name}))})),"Mobile"==e.device&&this.setTouchCtls(),"Standard"==e.device&&this.setKeyCtls(),t.setSpeed(t.data.speed),e.sounds.playerJoined.play().catch(e=>{});let o={},i=Object.assign({},e.myPlayer.getAttribute("position"));i.x=Number(i.x.toFixed(2)),i.y=Number(i.y.toFixed(2))+.3,i.z=Number(i.z.toFixed(2)),o.position=i;let a=Object.assign({},e.cam.getAttribute("rotation"));a.x=Number(Number(a.x).toFixed(1)),a.y=Number(Number(a.y).toFixed(1)),a.z=Number(Number(a.z).toFixed(1)),o.rotation=a,o.faceIndex=1,o.device=e.device,e.socket.playerData.faceIndex=o.faceIndex,e.myPlayer._avatarType=b.avatar.models[e.socket.playerData.faceIndex].type,"Oculus Quest"==e.device&&2===e.myPlayer._avatarType&&(o.lhp={x:0,y:0,z:0},o.lhr={x:0,y:0,z:0},o.rhp={x:0,y:0,z:0},o.rhr={x:0,y:0,z:0}),e.socket.emit("new-player",o)})},setKeyCtls:function(){document.body.addEventListener("keydown",t=>{switch(t.which){case 87:case 38:case 83:case 40:this.isWalking||(e.socket.emit("anim",1),this.isWalking=!0)}}),document.body.addEventListener("keyup",t=>{switch(t.which){case 87:case 38:case 83:case 40:e.socket.emit("anim",0),this.isWalking=!1}})},setTouchCtls:function(){window.addEventListener("touchstart",t=>{this.isWalking||(e.socket.emit("anim",1),this.isWalking=!0)}),window.addEventListener("touchend",t=>{e.socket.emit("anim",0),this.isWalking=!1})},setOculusCtls:function(){let t=this.lh.components["oculus-touch-controls"],n=this.rh.components["oculus-touch-controls"];setTimeout(()=>{AFRAME.utils.device.checkHeadsetConnected()&&(t.el.addEventListener("thumbsticktouchstart",t=>{this.isWalking||(e.socket.emit("anim",1),this.isWalking=!0)}),t.el.addEventListener("thumbsticktouchend",t=>{e.socket.emit("anim",0),this.isWalking=!1}),n.el.addEventListener("thumbsticktouchstart",t=>{this.isWalking||(e.socket.emit("anim",1),this.isWalking=!0)}),n.el.addEventListener("thumbsticktouchend",t=>{e.socket.emit("anim",0),this.isWalking=!1}))},3e3)},tick:function(t,n){if(this.data.me||!this.active){if(++this.totalSteps%6==0){let t={},n=Object.assign({},e.myPlayer.getAttribute("position"));n.x=Number(n.x.toFixed(2)),n.y=Number(n.y.toFixed(2)),n.z=Number(n.z.toFixed(2)),t.position=n;let o=Object.assign({},e.cam.getAttribute("rotation"));if(o.x=Number(Number(o.x).toFixed(1)),o.y=Number(Number(o.y).toFixed(1)),o.z=Number(Number(o.z).toFixed(1)),t.rotation=o,t.faceIndex=e.socket.playerData?e.socket.playerData.faceIndex:0,"Oculus Quest"==e.device&&2===e.myPlayer._avatarType&&this.lh.hasLoaded){let e=this.lh.getAttribute("position");t.lhp={},t.lhp.x=Number(e.x.toFixed(2)),t.lhp.y=Number(e.y.toFixed(2)),t.lhp.z=Number(e.z.toFixed(2));let n=this.lh.getAttribute("rotation");t.lhr={},t.lhr.x=Number(n.x.toFixed(1)),t.lhr.y=Number(n.y.toFixed(1)),t.lhr.z=Number(n.z.toFixed(1));let o=this.rh.getAttribute("position");t.rhp={},t.rhp.x=Number(o.x.toFixed(2)),t.rhp.y=Number(o.y.toFixed(2)),t.rhp.z=Number(o.z.toFixed(2));let i=this.rh.getAttribute("rotation");t.rhr={},t.rhr.x=Number(i.x.toFixed(1)),t.rhr.y=Number(i.y.toFixed(1)),t.rhr.z=Number(i.z.toFixed(1))}e.socket.setPlayerData(t),e.socket.sendUpdateToServer(),this.totalSteps%36==0&&e.hud&&e.hud.oxygenMeter&&e.hud.oxygenMeter.animateTo(e.hud.oxygenMeter.el.value-.0035)}this.el.timePlayed+=n}},setSpeed:function(e){document.querySelector("#navmesh")?this.el.setAttribute("movement-controls",`constrainToNavMesh: true; speed: ${e}`):this.el.setAttribute("movement-controls",`speed: ${e}`)}}),AFRAME.registerPrimitive("a-player",{defaultComponents:{player:{me:!0}},mappings:{eyelevel:"player.eyelevel",cursorcolor:"player.cursorcolor",rayobjects:"player.rayobjects",rayfar:"player.rayfar",speed:"player.speed"}})})(w),function(e){let t=b.bgm.songs,n=document.createElement("audio"),o="https://api.soundcloud.com/tracks/",i="/stream?client_id=b9d11449cd4c64d461b8b5c30650cd06",a=document.createElement("button");a.innerHTML="PLAY NEXT SONG",a.zIndex=100,a.style.display="none",a.addEventListener("click",t=>{e.bgm.playNext()});let r=document.createElement("div");r.style.margin="0 auto",r.style.width="800px",setTimeout(()=>{document.body.appendChild(r),r.appendChild(a)},5e3),n.addEventListener("ended",t=>{console.log("bgm song ended"),e.bgm.playNext()});let l=0;e.bgm={audio:n,tracks:t,play:()=>{n.play(),n.volume=b.bgm.volume},playTrackIndex:e=>{l=e,n.src=o+t[l]+i,n.crossorigin="anonymous",n.load(),n.loop=!b.bgm.playAll,n.play(),n.volume=b.bgm.volume},pause:()=>{n.pause()},playNext:()=>{++l==t.length&&(l=0),n.src=o+t[l]+i,n.crossorigin="anonymous",n.load(),n.loop=!b.bgm.playAll,n.play(),n.volume=b.bgm.volume}},document.addEventListener("gameStart",t=>{e.bgm.tracks.length&&e.bgm.playTrackIndex(0)})}(w),(e=>{let t=e.socket=io();t.on("connect",()=>{t.authid?(t.emit("reauth",t.authid),t.id=t.authid,console.log("Emitting reauth!"),console.log("socket.id : ",t.id),console.log("socket.playerData : "),console.log(t.playerData),console.log("socket.lastPlayerData : "),console.log(t.lastPlayerData),t.isInitialized=!0):(t.playerData={position:{},rotation:{},faceIndex:0},t.lastPlayerData={position:{},rotation:{},faceIndex:0},e.login=(e,n)=>{t.emit("login",{name:e,pw:n})})}),t.on("login-results",n=>{n.success?(document.querySelector("#login").style.zIndex=-1,document.querySelector("#login").style.display="none",document.querySelector("#login").setAttribute("hidden",""),e.myPlayer.name=n.name,e.game.start(),t.authid=t.id):document.getElementById("login-msg").innerHTML=n.msg}),t.on("anim",t=>{let n=["idle","walk"];e.otherPlayers[t.id]&&(e.otherPlayers[t.id].isWalking=t.anim,1===e.otherPlayers[t.id].avatarType&&e.otherPlayers[t.id].firstElementChild.setAttribute("animation-mixer",`clip:${n[t.anim]}`))}),t.on("avatar",t=>{e.otherPlayers[t.id]&&e.otherPlayers[t.id].components.player.setAvatar(t.avatar)}),t.on("disconnect",()=>{console.log("I have disconnected.")}),t.initializePlayerData=e=>{t.isInitialized=!0,t.playerData=e,t.playerData.faceIndex=0,t.emit("new-player",e)},t.setPlayerData=e=>{t.playerData=Object.assign({},e)},t.on("new-player",t=>{e.debug&&console.log("New player object received: ",t),e.game.hasBegun&&t.id!=e.socket.id&&(setTimeout(()=>{e.say(`${t.name} has joined the game!`)},1e3),e.__addOtherPlayer(t))}),t.on("initial-bodies-state",t=>{e.debug&&(console.warn("SETTING INITIAL BODIES STATE"),console.log(t)),e.__updateGrabbables(t)});e.utils.isEqual;t.sendUpdateToServer=()=>{if(!AFRAME.utils.deepEqual(t.lastPlayerData,t.playerData)){t.emit("send-update",t.playerData),t.lastPlayerData=Object.assign({},t.playerData);let o=[];for(var n in e.grabbables){let t=e.grabbables[n];if(t.states.includes("moving")||t.dirty){let e={name:n,position:t.object3D.position,scale:t.object3D.scale,rotation:{x:t.object3D.quaternion.x,y:t.object3D.quaternion.y,z:t.object3D.quaternion.z,w:t.object3D.quaternion.w},soundState:t.soundState};t.dirty=!1,o.push(e)}}o.length>0&&(t.emit("update-bodies",o),e.debug&&(console.log(`SENDING ${o[0].name} DATA TO SERVER`),console.log(o)))}},t.on("players-already-here",t=>{e.debug&&(console.log("receiving players already here"),console.log(t)),Object.keys(t).forEach((function(n,o){e.__addOtherPlayer({id:n,name:t[n].name,data:{position:t[n].position,rotation:t[n].rotation,faceIndex:t[n].faceIndex}})})),setTimeout(()=>{e.say(e.game.announcements.welcome)},e.game.welcomeDelay)}),t.on("request-for-bodies",()=>{let n={};for(name in e.grabbables){if(!e.grabbables.hasOwnProperty(name))continue;let t=e.grabbables[name];n[name]={name:name,position:t.object3D.position,scale:t.object3D.scale,rotation:{x:t.object3D.quaternion.x,y:t.object3D.quaternion.y,z:t.object3D.quaternion.z,w:t.object3D.quaternion.w},soundState:t.soundState}}t.emit("initial-bodies-state",n),e.debug&&(console.warn("SENDING INITIAL BODIES STATE TO SERVER"),console.log(n))}),t.on("update-bodies",t=>{e.game.hasBegun&&e.__updateGrabbables(t)}),t.on("update-players",t=>{e.game&&e.game.hasBegun&&e.__updateOtherPlayers(t)}),t.on("remove-player",t=>{if(e.game.hasBegun&&e.otherPlayers[t]){let n=e.otherPlayers[t].name;e.__removePlayer(t),setTimeout(()=>{e.say(`${n} ${b.playerLeftMsg}`)},1500)}}),t.on("msg",t=>{e.game.hasBegun&&e.__setPlayerMessage(t)}),t.on("failed-socket",()=>{window.location.reload()}),t.on("log",e=>{console.log(e)}),t.on("say",t=>{e.say(t.msg,t.name)})})(w),(e=>{AFRAME.registerSystem("collectible",{schema:{},init:function(){e.collectibles=[],e.socket.on("collect",t=>{if(!e.game||!e.game.hasBegun)return;let n=e.collectibles[t.index];if(n.el.components.sound__loop&&n.el.components.sound__loop.pause(),n.el.setAttribute("visible",!1),n.soundIsPlaying=!0,n.el.components.sound__collect.playSound(),n.data.cb&&!AFRAME.utils.device.isMobile()&&e.game[n.data.cb](n.el),n.el.addEventListener("sound-ended",e=>{n.soundIsPlaying=!1,n.pause()}),t.collector==e.socket.id&&n.data.affects)if(n.data.affects.includes("avatar")){let t;switch(n.el.id){case"avatar-upgrade-1":t=.35;break;case"avatar-upgrade-2":t=.5}e.myPlayer.components.player.setSpeed(t),console.log("speed boost")}else e.stats[n.data.affects].changeBy(n.data.value);if(t.collector!=e.socket.id&&"avatarUpgrade"==n.data.affects){let o,i;switch(console.log(e.otherPlayers[t.collector]),n.el.id){case"avatar-upgrade-1":o=document.querySelector("#avatar-to-clone-1").cloneNode(),i="Skully";break;case"avatar-upgrade-2":o=document.querySelector("#avatar-to-clone-2").cloneNode(),i="Speedy"}let a=e.otherPlayers[t.collector];o.appendChild(a.msg),a.msg.setAttribute("text",`value:${i};\n                                   align:center;\n                                   width:8;\n                                   wrap-count:24; \n                                   color:yellow`),o.setAttribute("visible",!0),a.appendChild(o),a.removeChild(a.model),a.model=o}}),e.socket.on("spawn-collectible",t=>{let n=e.collectibles[t];n.el.components.sound__loop&&n.el.components.sound__loop.play(),n.el.setAttribute("visible",!0),n.play()}),e.socket.on("request-for-collectibles",()=>{let t=[];e.collectibles.forEach(e=>{t.push({spawns:e.data.spawns,spawnDelay:e.data.spawnDelay})}),e.socket.emit("initial-collectibles-state",t)})}}),AFRAME.registerComponent("collectible",{schema:{threshold:{type:"number",default:2.7},soundCollect:{type:"string",default:"https://cdn.glitch.com/f8abb766-9950-44ff-9adb-2f5f53fdaf1b%2Fpowerup_1.mp3?1552158629039"},soundLoop:{},cb:{type:"string",default:""},affects:{type:"string",default:""},value:{type:"number",default:1},spawns:{type:"boolean",default:!1},spawnDelay:{type:"number",default:5}},init:function(){this.el.setAttribute("sound__collect",`src:url(${this.data.soundCollect})`),this.data.soundLoop&&this.el.setAttribute("sound__loop",`src:url(${this.data.soundLoop});autoplay:true;loop:true`),e.collectibles.push(this),console.log("running collectible init"),this.soundIsPlaying=!1},tick:function(){this.el.object3D.position.distanceTo(e.myPlayer.object3D.position)<this.data.threshold&&"avatarUpgrade"!=this.data.affects&&this.collect(),"avatarUpgrade"==this.data.affects&&this.el.parentElement.object3D.position.distanceTo(e.myPlayer.object3D.position)<this.data.threshold&&this.collect()},collect:function(){this.soundIsPlaying||(e.socket.disconnected?(this.el.components.sound__loop&&this.el.components.sound__loop.pause(),this.el.setAttribute("visible",!1),this.el.setAttribute("scale","0 0 0"),this.soundIsPlaying=!0,this.el.components.sound__collect.playSound(),this.data.cb&&e.game[this.data.cb](this.el),this.data.affects&&"avatarUpgrade"!==this.data.affects&&e.stats[this.data.affects].animateTo(e.stats[this.data.affects].value+this.data.value),this.el.addEventListener("sound-ended",e=>{this.soundIsPlaying=!1,this.pause()}),this.data.spawns&&setTimeout(()=>{this.el.components.sound__loop&&this.el.components.sound__loop.play(),this.el.setAttribute("visible",!0),this.el.setAttribute("scale","1 1 1"),this.play()},1e3*this.data.spawnDelay)):e.socket.emit("request-collection",{index:e.collectibles.indexOf(this)}))}})})(w),(e=>{AFRAME.registerComponent("npc",{schema:{waypoints:{type:"array"},name:{type:"string"},roam:{type:"boolean",default:!1}},init:function(){this.waypoints=this.data.waypoints,this.waypointsIndex=0,this.moves=0,this.data.name?this.name=this.data.name:this.name=e.npc?`npc${e.npc.length}`:"npc0",e.npc?e.npc[this.name]=this:(e.npc={},e.npc[this.name]=this),this.addListeners(),e.socket.emit("register-npc",{name:this.name,waypoints:this.waypoints}),this.data.roam&&this.requestMove()},addListeners:function(){let t=this;this.el.addEventListener("navigation-end",this.onNavigationEnd.bind(t)),e.socket._callbacks["$npc-move"]||e.socket.on("npc-move",n=>{n.dest!==t.dest&&(e.npc[n.name].dest=n.dest,e.npc[n.name].setPosition(n.pos),e.npc[n.name].move(n.dest))})},setWaypoints:function(t){this.waypoints=t,e.socket.emit("set-npc-waypoints",{name:this.name,waypoints:t})},addWaypoint:function(t){this.waypoints.push(t),e.socket.emit("add-npc-waypoint",{name:this.name,waypoint:t})},move:function(e=!1){let t;this.moves++;let n={};if(t=e||this.waypoints[this.waypointsIndex]){let e=t.split(" ");n.x=e[0],n.y=e[1],n.z=e[2],n&&this.el.setAttribute("nav-agent",{active:!0,destination:n,speed:2})}else console.error("You must define some waypoints for your npc to roam! < npc component >")},setPosition:function(e){this.el.setAttribute("position",e)},tick:function(e,t){},requestMove:function(t=""){e.socket.emit("npc-move",{name:this.name,pos:this.el.getAttribute("position"),dest:t})},onNavigationEnd:function(e){this.waypointsIndex++,this.waypointsIndex==this.waypoints.length&&(this.waypointsIndex=0);let t=this.waypoints[this.waypointsIndex];this.data.roam&&this.requestMove(t)}})})(w),(e=>{AFRAME.registerComponent("userdata",{init:function(){e.db={},e.db.set=(t,n)=>{e.socket.emit("db-set",t,n)},e.db.get=(t,n)=>{e.socket.emit("db-get",t,n)}}})})(w),(e=>{AFRAME.registerComponent("iot-api",{schema:{LED:{type:"string",default:"on"}},init:function(){const t=this;this.el.addEventListener("click",e=>{console.log("Click detected on LED."),t.toggleLED()}),e.iot={},e.iot.set=(t,n)=>{e.socket.emit("iot-set",t,n)},e.iot.get=(t,n)=>{e.socket.emit("iot-get",t,n)},e.socket.on("iot-update",e=>{console.log("LED update"),"on"==e.LED?this.onLED():this.offLED()}),e.iot.get("LED",e=>{console.log("LED INITIALIZE"),"on"==e?this.onLED():this.offLED()})},setLED:function(e){},offLED:function(){this.data.LED="off",this.el.setAttribute("material","color:#551818;emissiveIntensity:0")},onLED:function(){this.data.LED="on",this.el.setAttribute("material","color:red;emissiveIntensity:4")},toggleLED:function(){"on"==this.data.LED?(this.offLED(),e.iot.set({LED:"off"},()=>{})):(this.onLED(),e.iot.set({LED:"on"},()=>{}))},tick:function(e,t){}})})(w),window.console.warn=function(){}}();
//# sourceMappingURL=bundle.js.map
