{
  "id": 3386,
  "name": "CS1 Shader",
  "fragment": "#define DOWN_SCALE 1.0\n#define MAX_INT_DIGITS 4\n#define NORMAL 0\n#define INVERT 1\n#define UNDERLINE 2\n\nprecision highp float;\nprecision highp int;\nuniform float time;\nuniform vec2 resolution;\nuniform vec3 color;\nuniform vec3 background_color;\nvarying vec2 vUv;\nint TEXT_MODE = NORMAL;\nvec4 ch_spc = vec4(0x000000, 0x000000, 0x000000, 0x000000);\nvec4 ch_exc = vec4(0x003078, 0x787830, 0x300030, 0x300000);\nvec4 ch_quo = vec4(0x006666, 0x662400, 0x000000, 0x000000);\nvec4 ch_hsh = vec4(0x006C6C, 0xFE6C6C, 0x6CFE6C, 0x6C0000);\nvec4 ch_dol = vec4(0x30307C, 0xC0C078, 0x0C0CF8, 0x303000);\nvec4 ch_pct = vec4(0x000000, 0xC4CC18, 0x3060CC, 0x8C0000);\nvec4 ch_amp = vec4(0x0070D8, 0xD870FA, 0xDECCDC, 0x760000);\nvec4 ch_apo = vec4(0x003030, 0x306000, 0x000000, 0x000000);\nvec4 ch_lbr = vec4(0x000C18, 0x306060, 0x603018, 0x0C0000);\nvec4 ch_rbr = vec4(0x006030, 0x180C0C, 0x0C1830, 0x600000);\nvec4 ch_ast = vec4(0x000000, 0x663CFF, 0x3C6600, 0x000000);\nvec4 ch_crs = vec4(0x000000, 0x18187E, 0x181800, 0x000000);\nvec4 ch_com = vec4(0x000000, 0x000000, 0x000038, 0x386000);\nvec4 ch_dsh = vec4(0x000000, 0x0000FE, 0x000000, 0x000000);\nvec4 ch_per = vec4(0x000000, 0x000000, 0x000038, 0x380000);\nvec4 ch_lsl = vec4(0x000002, 0x060C18, 0x3060C0, 0x800000);\nvec4 ch_0 = vec4(0x007CC6, 0xD6D6D6, 0xD6D6C6, 0x7C0000);\nvec4 ch_1 = vec4(0x001030, 0xF03030, 0x303030, 0xFC0000);\nvec4 ch_2 = vec4(0x0078CC, 0xCC0C18, 0x3060CC, 0xFC0000);\nvec4 ch_3 = vec4(0x0078CC, 0x0C0C38, 0x0C0CCC, 0x780000);\nvec4 ch_4 = vec4(0x000C1C, 0x3C6CCC, 0xFE0C0C, 0x1E0000);\nvec4 ch_5 = vec4(0x00FCC0, 0xC0C0F8, 0x0C0CCC, 0x780000);\nvec4 ch_6 = vec4(0x003860, 0xC0C0F8, 0xCCCCCC, 0x780000);\nvec4 ch_7 = vec4(0x00FEC6, 0xC6060C, 0x183030, 0x300000);\nvec4 ch_8 = vec4(0x0078CC, 0xCCEC78, 0xDCCCCC, 0x780000);\nvec4 ch_9 = vec4(0x0078CC, 0xCCCC7C, 0x181830, 0x700000);\nvec4 ch_col = vec4(0x000000, 0x383800, 0x003838, 0x000000);\nvec4 ch_scl = vec4(0x000000, 0x383800, 0x003838, 0x183000);\nvec4 ch_les = vec4(0x000C18, 0x3060C0, 0x603018, 0x0C0000);\nvec4 ch_equ = vec4(0x000000, 0x007E00, 0x7E0000, 0x000000);\nvec4 ch_grt = vec4(0x006030, 0x180C06, 0x0C1830, 0x600000);\nvec4 ch_que = vec4(0x0078CC, 0x0C1830, 0x300030, 0x300000);\nvec4 ch_ats = vec4(0x007CC6, 0xC6DEDE, 0xDEC0C0, 0x7C0000);\nvec4 ch_A = vec4(0x003078, 0xCCCCCC, 0xFCCCCC, 0xCC0000);\nvec4 ch_B = vec4(0x00FC66, 0x66667C, 0x666666, 0xFC0000);\nvec4 ch_C = vec4(0x003C66, 0xC6C0C0, 0xC0C666, 0x3C0000);\nvec4 ch_D = vec4(0x00F86C, 0x666666, 0x66666C, 0xF80000);\nvec4 ch_E = vec4(0x00FE62, 0x60647C, 0x646062, 0xFE0000);\nvec4 ch_F = vec4(0x00FE66, 0x62647C, 0x646060, 0xF00000);\nvec4 ch_G = vec4(0x003C66, 0xC6C0C0, 0xCEC666, 0x3E0000);\nvec4 ch_H = vec4(0x00CCCC, 0xCCCCFC, 0xCCCCCC, 0xCC0000);\nvec4 ch_I = vec4(0x007830, 0x303030, 0x303030, 0x780000);\nvec4 ch_J = vec4(0x001E0C, 0x0C0C0C, 0xCCCCCC, 0x780000);\nvec4 ch_K = vec4(0x00E666, 0x6C6C78, 0x6C6C66, 0xE60000);\nvec4 ch_L = vec4(0x00F060, 0x606060, 0x626666, 0xFE0000);\nvec4 ch_M = vec4(0x00C6EE, 0xFEFED6, 0xC6C6C6, 0xC60000);\nvec4 ch_N = vec4(0x00C6C6, 0xE6F6FE, 0xDECEC6, 0xC60000);\nvec4 ch_O = vec4(0x00386C, 0xC6C6C6, 0xC6C66C, 0x380000);\nvec4 ch_P = vec4(0x00FC66, 0x66667C, 0x606060, 0xF00000);\nvec4 ch_Q = vec4(0x00386C, 0xC6C6C6, 0xCEDE7C, 0x0C1E00);\nvec4 ch_R = vec4(0x00FC66, 0x66667C, 0x6C6666, 0xE60000);\nvec4 ch_S = vec4(0x0078CC, 0xCCC070, 0x18CCCC, 0x780000);\nvec4 ch_T = vec4(0x00FCB4, 0x303030, 0x303030, 0x780000);\nvec4 ch_U = vec4(0x00CCCC, 0xCCCCCC, 0xCCCCCC, 0x780000);\nvec4 ch_V = vec4(0x00CCCC, 0xCCCCCC, 0xCCCC78, 0x300000);\nvec4 ch_W = vec4(0x00C6C6, 0xC6C6D6, 0xD66C6C, 0x6C0000);\nvec4 ch_X = vec4(0x00CCCC, 0xCC7830, 0x78CCCC, 0xCC0000);\nvec4 ch_Y = vec4(0x00CCCC, 0xCCCC78, 0x303030, 0x780000);\nvec4 ch_Z = vec4(0x00FECE, 0x981830, 0x6062C6, 0xFE0000);\nvec4 ch_lsb = vec4(0x003C30, 0x303030, 0x303030, 0x3C0000);\nvec4 ch_rsl = vec4(0x000080, 0xC06030, 0x180C06, 0x020000);\nvec4 ch_rsb = vec4(0x003C0C, 0x0C0C0C, 0x0C0C0C, 0x3C0000);\nvec4 ch_pow = vec4(0x10386C, 0xC60000, 0x000000, 0x000000);\nvec4 ch_usc = vec4(0x000000, 0x000000, 0x000000, 0x00FF00);\nvec4 ch_a = vec4(0x000000, 0x00780C, 0x7CCCCC, 0x760000);\nvec4 ch_b = vec4(0x00E060, 0x607C66, 0x666666, 0xDC0000);\nvec4 ch_c = vec4(0x000000, 0x0078CC, 0xC0C0CC, 0x780000);\nvec4 ch_d = vec4(0x001C0C, 0x0C7CCC, 0xCCCCCC, 0x760000);\nvec4 ch_e = vec4(0x000000, 0x0078CC, 0xFCC0CC, 0x780000);\nvec4 ch_f = vec4(0x00386C, 0x6060F8, 0x606060, 0xF00000);\nvec4 ch_g = vec4(0x000000, 0x0076CC, 0xCCCC7C, 0x0CCC78);\nvec4 ch_h = vec4(0x00E060, 0x606C76, 0x666666, 0xE60000);\nvec4 ch_i = vec4(0x001818, 0x007818, 0x181818, 0x7E0000);\nvec4 ch_j = vec4(0x000C0C, 0x003C0C, 0x0C0C0C, 0xCCCC78);\nvec4 ch_k = vec4(0x00E060, 0x60666C, 0x786C66, 0xE60000);\nvec4 ch_l = vec4(0x007818, 0x181818, 0x181818, 0x7E0000);\nvec4 ch_m = vec4(0x000000, 0x00FCD6, 0xD6D6D6, 0xC60000);\nvec4 ch_n = vec4(0x000000, 0x00F8CC, 0xCCCCCC, 0xCC0000);\nvec4 ch_o = vec4(0x000000, 0x0078CC, 0xCCCCCC, 0x780000);\nvec4 ch_p = vec4(0x000000, 0x00DC66, 0x666666, 0x7C60F0);\nvec4 ch_q = vec4(0x000000, 0x0076CC, 0xCCCCCC, 0x7C0C1E);\nvec4 ch_r = vec4(0x000000, 0x00EC6E, 0x766060, 0xF00000);\nvec4 ch_s = vec4(0x000000, 0x0078CC, 0x6018CC, 0x780000);\nvec4 ch_t = vec4(0x000020, 0x60FC60, 0x60606C, 0x380000);\nvec4 ch_u = vec4(0x000000, 0x00CCCC, 0xCCCCCC, 0x760000);\nvec4 ch_v = vec4(0x000000, 0x00CCCC, 0xCCCC78, 0x300000);\nvec4 ch_w = vec4(0x000000, 0x00C6C6, 0xD6D66C, 0x6C0000);\nvec4 ch_x = vec4(0x000000, 0x00C66C, 0x38386C, 0xC60000);\nvec4 ch_y = vec4(0x000000, 0x006666, 0x66663C, 0x0C18F0);\nvec4 ch_z = vec4(0x000000, 0x00FC8C, 0x1860C4, 0xFC0000);\nvec4 ch_lpa = vec4(0x001C30, 0x3060C0, 0x603030, 0x1C0000);\nvec4 ch_bar = vec4(0x001818, 0x181800, 0x181818, 0x180000);\nvec4 ch_rpa = vec4(0x00E030, 0x30180C, 0x183030, 0xE00000);\nvec4 ch_tid = vec4(0x0073DA, 0xCE0000, 0x000000, 0x000000);\nvec4 ch_lar = vec4(0x000000, 0x10386C, 0xC6C6FE, 0x000000);\nvec2 res = vec2(1.0) / 1.0;\nvec2 print_pos = vec2(0.0);\nfloat extract_bit(float n, float b) \n    {\n        b = clamp(b, -1.0, 24.0);\n        return floor(mod(floor(n / pow(2.0, floor(b))), 2.0));\n    }\nfloat sprite(vec4 spr, vec2 size, vec2 uv) \n    {\n        uv = floor(uv);\n        float bit = (size.x - uv.x - 1.0) + uv.y * size.x;\n        bool bounds = all(greaterThanEqual(uv, vec2(0))) && all(lessThan(uv, size));\n        float pixels = 0.0;\n        pixels += extract_bit(spr.x, bit - 72.0);\n        pixels += extract_bit(spr.y, bit - 48.0);\n        pixels += extract_bit(spr.z, bit - 24.0);\n        pixels += extract_bit(spr.w, bit - 00.0);\n        return bounds ? pixels : 0.0;\n    }\nfloat char(vec4 ch, vec2 uv) \n    {\n        if (TEXT_MODE == INVERT) \n        {\n            ch = pow(2.0, 24.0) - 1.0 - ch;\n        }\n         if (TEXT_MODE == UNDERLINE) \n        {\n            ch.w = floor(ch.w / 256.0) * 256.0 + 255.0;\n        }\n         float px = sprite(ch, vec2(8, 12), uv - print_pos);\n        print_pos.x += 8.;\n        return px;\n    }\nvec4 get_digit(float d) \n    {\n        d = floor(d);\n        if (d == 0.0) return ch_0;\n         if (d == 1.0) return ch_1;\n         if (d == 2.0) return ch_2;\n         if (d == 3.0) return ch_3;\n         if (d == 4.0) return ch_4;\n         if (d == 5.0) return ch_5;\n         if (d == 6.0) return ch_6;\n         if (d == 7.0) return ch_7;\n         if (d == 8.0) return ch_8;\n         if (d == 9.0) return ch_9;\n         return vec4(0.0);\n    }\nfloat print_number(float number, vec2 uv) \n    {\n        float result = 0.0;\n        for (int i = 3;\n i >= -1; i--) \n        {\n            float digit = mod(number / pow(10.0, float(i)), 10.0);\n            if (i == -1) \n            {\n                result += char(ch_per, uv);\n            }\n             if (abs(number) > pow(10.0, float(i)) || i == 0) \n            {\n                result += char(get_digit(digit), uv);\n            }\n         }\n        return result;\n    }\nfloat print_integer(float number, int zeros, vec2 uv) \n    {\n        float result = 0.0;\n        for (int i = MAX_INT_DIGITS;\n i >= 0; i--) \n        {\n            float digit = mod(number / pow(10.0, float(i)), 10.0);\n            if (abs(number) > pow(10.0, float(i)) || zeros > i || i == 0) \n            {\n                result += char(get_digit(digit), uv);\n            }\n         }\n        return result;\n    }\nfloat text(vec2 uv) \n    {\n        float col = 0.0;\n        vec2 center = res / 2.0;\n        print_pos = floor(center - vec2((17.0 * 8.), (1.0 * 12.)) / 2.0);\n        col += char(ch_C, uv);\n        col += char(ch_S, uv);\n        col += char(ch_1, uv);\n        TEXT_MODE = INVERT;\n        col += char(ch_G, uv);\n        col += char(ch_a, uv);\n        col += char(ch_m, uv);\n        col += char(ch_e, uv);\n        TEXT_MODE = NORMAL;\n        col += char(ch_E, uv);\n        col += char(ch_n, uv);\n        col += char(ch_g, uv);\n        col += char(ch_i, uv);\n        col += char(ch_n, uv);\n        col += char(ch_e, uv);\n        col += char(ch_exc, uv);\n        return col;\n    }\nvec4 Text_main() \n    {\n        vec4 Text_gl_FragColor = vec4(0.0);\n        vec2 uv = (vUv.xy - 0.5) * resolution;\n        vec2 duv = floor(uv.xy / 1.0);\n        float pixel = text(duv);\n        if (pixel > 0.0) \n        {\n            Text_gl_FragColor = vec4(vec3(pixel) * color, 1.0);\n            return Text_gl_FragColor *= 1.0;\n        }\n else \n        {\n            discard;\n        }\n    }\nvec4 Text_Only_Shader1556670324252_90_main() \n    {\n        vec4 Text_Only_Shader1556670324252_90_gl_FragColor = vec4(0.0);\n        Text_Only_Shader1556670324252_90_gl_FragColor = Text_main();\n        return Text_Only_Shader1556670324252_90_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = Text_Only_Shader1556670324252_90_main();    }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec2 vUv;\nvec4 Hello_ShaderFrog1551692717683_383_main() \n    {\n        vec4 Hello_ShaderFrog1551692717683_383_gl_Position = vec4(0.0);\n        vUv = uv;\n        Hello_ShaderFrog1551692717683_383_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Hello_ShaderFrog1551692717683_383_gl_Position *= 1.0;\n    }\nvec4 Text_Only_Shader1556670324252_90_main() \n    {\n        vec4 Text_Only_Shader1556670324252_90_gl_Position = vec4(0.0);\n        Text_Only_Shader1556670324252_90_gl_Position = Hello_ShaderFrog1551692717683_383_main();\n        return Text_Only_Shader1556670324252_90_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Text_Only_Shader1556670324252_90_main();    }\n",
  "uniforms": {
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "color": {
      "value": {
        "r": 0.7176470588235294,
        "g": 0,
        "b": 0
      },
      "type": "c",
      "glslType": "vec3"
    },
    "resolution": {
      "value": {
        "x": "200",
        "y": "80"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "background_color": {
      "value": {
        "r": 0,
        "g": 0.8156862745098039,
        "b": 1
      },
      "type": "c",
      "glslType": "vec3"
    }
  },
  "side":2,
  "url": "http://shaderfrog.com/app/view/3386",
  "user": {
    "username": "SirFizX",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}