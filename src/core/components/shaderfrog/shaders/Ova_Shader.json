{
  "id": 3301,
  "name": "Ova Shader",
  "fragment": "precision highp float;\nprecision highp int;\nuniform float time;\nuniform vec3 color1;\nuniform vec3 color2;\nvarying vec3 vPosition;\nvarying float vJitter;\nvec3 permute(vec3 x) \n    {\n        return mod((34.0 * x + 1.0) * x, 289.0);\n    }\nvec3 dist(vec3 x, vec3 y, vec3 z) \n    {\n        return x * x + y * y + z * z;\n    }\nvec2 worley(vec3 P, float jitter) \n    {\n        float K = 0.142857142857;\n        float Ko = 0.428571428571;\n        float K2 = 0.020408163265306;\n        float Kz = 0.166666666667;\n        float Kzo = 0.416666666667;\n        vec3 Pi = mod(floor(P), 289.0);\n        vec3 Pf = fract(P) - 0.5;\n        vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\n        vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\n        vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\n        vec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));\n        vec3 p1 = permute(p + Pi.y - 1.0);\n        vec3 p2 = permute(p + Pi.y);\n        vec3 p3 = permute(p + Pi.y + 1.0);\n        vec3 p11 = permute(p1 + Pi.z - 1.0);\n        vec3 p12 = permute(p1 + Pi.z);\n        vec3 p13 = permute(p1 + Pi.z + 1.0);\n        vec3 p21 = permute(p2 + Pi.z - 1.0);\n        vec3 p22 = permute(p2 + Pi.z);\n        vec3 p23 = permute(p2 + Pi.z + 1.0);\n        vec3 p31 = permute(p3 + Pi.z - 1.0);\n        vec3 p32 = permute(p3 + Pi.z);\n        vec3 p33 = permute(p3 + Pi.z + 1.0);\n        vec3 ox11 = fract(p11 * K) - Ko;\n        vec3 oy11 = mod(floor(p11 * K), 7.0) * K - Ko;\n        vec3 oz11 = floor(p11 * K2) * Kz - Kzo;\n        vec3 ox12 = fract(p12 * K) - Ko;\n        vec3 oy12 = mod(floor(p12 * K), 7.0) * K - Ko;\n        vec3 oz12 = floor(p12 * K2) * Kz - Kzo;\n        vec3 ox13 = fract(p13 * K) - Ko;\n        vec3 oy13 = mod(floor(p13 * K), 7.0) * K - Ko;\n        vec3 oz13 = floor(p13 * K2) * Kz - Kzo;\n        vec3 ox21 = fract(p21 * K) - Ko;\n        vec3 oy21 = mod(floor(p21 * K), 7.0) * K - Ko;\n        vec3 oz21 = floor(p21 * K2) * Kz - Kzo;\n        vec3 ox22 = fract(p22 * K) - Ko;\n        vec3 oy22 = mod(floor(p22 * K), 7.0) * K - Ko;\n        vec3 oz22 = floor(p22 * K2) * Kz - Kzo;\n        vec3 ox23 = fract(p23 * K) - Ko;\n        vec3 oy23 = mod(floor(p23 * K), 7.0) * K - Ko;\n        vec3 oz23 = floor(p23 * K2) * Kz - Kzo;\n        vec3 ox31 = fract(p31 * K) - Ko;\n        vec3 oy31 = mod(floor(p31 * K), 7.0) * K - Ko;\n        vec3 oz31 = floor(p31 * K2) * Kz - Kzo;\n        vec3 ox32 = fract(p32 * K) - Ko;\n        vec3 oy32 = mod(floor(p32 * K), 7.0) * K - Ko;\n        vec3 oz32 = floor(p32 * K2) * Kz - Kzo;\n        vec3 ox33 = fract(p33 * K) - Ko;\n        vec3 oy33 = mod(floor(p33 * K), 7.0) * K - Ko;\n        vec3 oz33 = floor(p33 * K2) * Kz - Kzo;\n        vec3 dx11 = Pfx + jitter * ox11;\n        vec3 dy11 = Pfy.x + jitter * oy11;\n        vec3 dz11 = Pfz.x + jitter * oz11;\n        vec3 dx12 = Pfx + jitter * ox12;\n        vec3 dy12 = Pfy.x + jitter * oy12;\n        vec3 dz12 = Pfz.y + jitter * oz12;\n        vec3 dx13 = Pfx + jitter * ox13;\n        vec3 dy13 = Pfy.x + jitter * oy13;\n        vec3 dz13 = Pfz.z + jitter * oz13;\n        vec3 dx21 = Pfx + jitter * ox21;\n        vec3 dy21 = Pfy.y + jitter * oy21;\n        vec3 dz21 = Pfz.x + jitter * oz21;\n        vec3 dx22 = Pfx + jitter * ox22;\n        vec3 dy22 = Pfy.y + jitter * oy22;\n        vec3 dz22 = Pfz.y + jitter * oz22;\n        vec3 dx23 = Pfx + jitter * ox23;\n        vec3 dy23 = Pfy.y + jitter * oy23;\n        vec3 dz23 = Pfz.z + jitter * oz23;\n        vec3 dx31 = Pfx + jitter * ox31;\n        vec3 dy31 = Pfy.z + jitter * oy31;\n        vec3 dz31 = Pfz.x + jitter * oz31;\n        vec3 dx32 = Pfx + jitter * ox32;\n        vec3 dy32 = Pfy.z + jitter * oy32;\n        vec3 dz32 = Pfz.y + jitter * oz32;\n        vec3 dx33 = Pfx + jitter * ox33;\n        vec3 dy33 = Pfy.z + jitter * oy33;\n        vec3 dz33 = Pfz.z + jitter * oz33;\n        vec3 d11 = dist(dx11, dy11, dz11);\n        vec3 d12 = dist(dx12, dy12, dz12);\n        vec3 d13 = dist(dx13, dy13, dz13);\n        vec3 d21 = dist(dx21, dy21, dz21);\n        vec3 d22 = dist(dx22, dy22, dz22);\n        vec3 d23 = dist(dx23, dy23, dz23);\n        vec3 d31 = dist(dx31, dy31, dz31);\n        vec3 d32 = dist(dx32, dy32, dz32);\n        vec3 d33 = dist(dx33, dy33, dz33);\n        vec3 d1a = min(d11, d12);\n        d12 = max(d11, d12);\n        d11 = min(d1a, d13);\n        d13 = max(d1a, d13);\n        d12 = min(d12, d13);\n        vec3 d2a = min(d21, d22);\n        d22 = max(d21, d22);\n        d21 = min(d2a, d23);\n        d23 = max(d2a, d23);\n        d22 = min(d22, d23);\n        vec3 d3a = min(d31, d32);\n        d32 = max(d31, d32);\n        d31 = min(d3a, d33);\n        d33 = max(d3a, d33);\n        d32 = min(d32, d33);\n        vec3 da = min(d11, d21);\n        d21 = max(d11, d21);\n        d11 = min(da, d31);\n        d31 = max(da, d31);\n        d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n        d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx;\n        d12 = min(d12, d21);\n        d12 = min(d12, d22);\n        d12 = min(d12, d31);\n        d12 = min(d12, d32);\n        d11.yz = min(d11.yz, d12.xy);\n        d11.y = min(d11.y, d12.z);\n        d11.y = min(d11.y, d11.z);\n        return sqrt(d11.xy);\n    }\nvec4 Ruby_Mine1553790481262_158_main() \n    {\n        vec4 Ruby_Mine1553790481262_158_gl_FragColor = vec4(0.0);\n        vec2 worl = worley(vPosition, vJitter);\n        float world = worl.y - worl.x;\n        vec3 color = mix(color1, color2, clamp(world * 2.0, 0.0, 1.0));\n        Ruby_Mine1553790481262_158_gl_FragColor = vec4((color * 0.1) + (color * world), 1.0);\n        return Ruby_Mine1553790481262_158_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = Ruby_Mine1553790481262_158_main();    }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform float time;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nvarying vec3 vPosition;\nvarying float vJitter;\nvec3 permute(vec3 x) \n    {\n        return mod((34.0 * x + 1.0) * x, 289.0);\n    }\nvec3 dist(vec3 x, vec3 y, vec3 z) \n    {\n        return x * x + y * y + z * z;\n    }\nvec2 worley(vec3 P, float jitter) \n    {\n        float K = 0.142857142857;\n        float Ko = 0.428571428571;\n        float K2 = 0.020408163265306;\n        float Kz = 0.166666666667;\n        float Kzo = 0.416666666667;\n        vec3 Pi = mod(floor(P), 289.0);\n        vec3 Pf = fract(P) - 0.5;\n        vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\n        vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\n        vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\n        vec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));\n        vec3 p1 = permute(p + Pi.y - 1.0);\n        vec3 p2 = permute(p + Pi.y);\n        vec3 p3 = permute(p + Pi.y + 1.0);\n        vec3 p11 = permute(p1 + Pi.z - 1.0);\n        vec3 p12 = permute(p1 + Pi.z);\n        vec3 p13 = permute(p1 + Pi.z + 1.0);\n        vec3 p21 = permute(p2 + Pi.z - 1.0);\n        vec3 p22 = permute(p2 + Pi.z);\n        vec3 p23 = permute(p2 + Pi.z + 1.0);\n        vec3 p31 = permute(p3 + Pi.z - 1.0);\n        vec3 p32 = permute(p3 + Pi.z);\n        vec3 p33 = permute(p3 + Pi.z + 1.0);\n        vec3 ox11 = fract(p11 * K) - Ko;\n        vec3 oy11 = mod(floor(p11 * K), 7.0) * K - Ko;\n        vec3 oz11 = floor(p11 * K2) * Kz - Kzo;\n        vec3 ox12 = fract(p12 * K) - Ko;\n        vec3 oy12 = mod(floor(p12 * K), 7.0) * K - Ko;\n        vec3 oz12 = floor(p12 * K2) * Kz - Kzo;\n        vec3 ox13 = fract(p13 * K) - Ko;\n        vec3 oy13 = mod(floor(p13 * K), 7.0) * K - Ko;\n        vec3 oz13 = floor(p13 * K2) * Kz - Kzo;\n        vec3 ox21 = fract(p21 * K) - Ko;\n        vec3 oy21 = mod(floor(p21 * K), 7.0) * K - Ko;\n        vec3 oz21 = floor(p21 * K2) * Kz - Kzo;\n        vec3 ox22 = fract(p22 * K) - Ko;\n        vec3 oy22 = mod(floor(p22 * K), 7.0) * K - Ko;\n        vec3 oz22 = floor(p22 * K2) * Kz - Kzo;\n        vec3 ox23 = fract(p23 * K) - Ko;\n        vec3 oy23 = mod(floor(p23 * K), 7.0) * K - Ko;\n        vec3 oz23 = floor(p23 * K2) * Kz - Kzo;\n        vec3 ox31 = fract(p31 * K) - Ko;\n        vec3 oy31 = mod(floor(p31 * K), 7.0) * K - Ko;\n        vec3 oz31 = floor(p31 * K2) * Kz - Kzo;\n        vec3 ox32 = fract(p32 * K) - Ko;\n        vec3 oy32 = mod(floor(p32 * K), 7.0) * K - Ko;\n        vec3 oz32 = floor(p32 * K2) * Kz - Kzo;\n        vec3 ox33 = fract(p33 * K) - Ko;\n        vec3 oy33 = mod(floor(p33 * K), 7.0) * K - Ko;\n        vec3 oz33 = floor(p33 * K2) * Kz - Kzo;\n        vec3 dx11 = Pfx + jitter * ox11;\n        vec3 dy11 = Pfy.x + jitter * oy11;\n        vec3 dz11 = Pfz.x + jitter * oz11;\n        vec3 dx12 = Pfx + jitter * ox12;\n        vec3 dy12 = Pfy.x + jitter * oy12;\n        vec3 dz12 = Pfz.y + jitter * oz12;\n        vec3 dx13 = Pfx + jitter * ox13;\n        vec3 dy13 = Pfy.x + jitter * oy13;\n        vec3 dz13 = Pfz.z + jitter * oz13;\n        vec3 dx21 = Pfx + jitter * ox21;\n        vec3 dy21 = Pfy.y + jitter * oy21;\n        vec3 dz21 = Pfz.x + jitter * oz21;\n        vec3 dx22 = Pfx + jitter * ox22;\n        vec3 dy22 = Pfy.y + jitter * oy22;\n        vec3 dz22 = Pfz.y + jitter * oz22;\n        vec3 dx23 = Pfx + jitter * ox23;\n        vec3 dy23 = Pfy.y + jitter * oy23;\n        vec3 dz23 = Pfz.z + jitter * oz23;\n        vec3 dx31 = Pfx + jitter * ox31;\n        vec3 dy31 = Pfy.z + jitter * oy31;\n        vec3 dz31 = Pfz.x + jitter * oz31;\n        vec3 dx32 = Pfx + jitter * ox32;\n        vec3 dy32 = Pfy.z + jitter * oy32;\n        vec3 dz32 = Pfz.y + jitter * oz32;\n        vec3 dx33 = Pfx + jitter * ox33;\n        vec3 dy33 = Pfy.z + jitter * oy33;\n        vec3 dz33 = Pfz.z + jitter * oz33;\n        vec3 d11 = dist(dx11, dy11, dz11);\n        vec3 d12 = dist(dx12, dy12, dz12);\n        vec3 d13 = dist(dx13, dy13, dz13);\n        vec3 d21 = dist(dx21, dy21, dz21);\n        vec3 d22 = dist(dx22, dy22, dz22);\n        vec3 d23 = dist(dx23, dy23, dz23);\n        vec3 d31 = dist(dx31, dy31, dz31);\n        vec3 d32 = dist(dx32, dy32, dz32);\n        vec3 d33 = dist(dx33, dy33, dz33);\n        vec3 d1a = min(d11, d12);\n        d12 = max(d11, d12);\n        d11 = min(d1a, d13);\n        d13 = max(d1a, d13);\n        d12 = min(d12, d13);\n        vec3 d2a = min(d21, d22);\n        d22 = max(d21, d22);\n        d21 = min(d2a, d23);\n        d23 = max(d2a, d23);\n        d22 = min(d22, d23);\n        vec3 d3a = min(d31, d32);\n        d32 = max(d31, d32);\n        d31 = min(d3a, d33);\n        d33 = max(d3a, d33);\n        d32 = min(d32, d33);\n        vec3 da = min(d11, d21);\n        d21 = max(d11, d21);\n        d11 = min(da, d31);\n        d31 = max(da, d31);\n        d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n        d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx;\n        d12 = min(d12, d21);\n        d12 = min(d12, d22);\n        d12 = min(d12, d31);\n        d12 = min(d12, d32);\n        d11.yz = min(d11.yz, d12.xy);\n        d11.y = min(d11.y, d12.z);\n        d11.y = min(d11.y, d11.z);\n        return sqrt(d11.xy);\n    }\nvec4 Ruby_Mine1553790481262_158_main() \n    {\n        vec4 Ruby_Mine1553790481262_158_gl_Position = vec4(0.0);\n        vJitter = 1.0;\n        vPosition = (position * 2.0) + vec3(sin(time), cos(time), cos(time + 3.14));\n        vec2 worl = worley(vPosition, vJitter);\n        vec3 pos = position - (length(worl) * normal * 0.2);\n        Ruby_Mine1553790481262_158_gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n        return Ruby_Mine1553790481262_158_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Ruby_Mine1553790481262_158_main();    }\n",
  "uniforms": {
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "color1": {
      "value": {
        "r": 0.95,
        "g": 0.1,
        "b": 0.8
      },
      "type": "c",
      "glslType": "vec3"
    },
    "color2": {
      "value": {
        "r": 0.7,
        "g": 0.07,
        "b": 0.6
      },
      "type": "c",
      "glslType": "vec3"
    }
  },
  "url": "http://shaderfrog.com/app/view/3301",
  "user": {
    "username": "SirFizX",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}